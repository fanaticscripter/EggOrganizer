// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: ei/ei.proto

package ei

import (
	aux "github.com/fanaticscripter/EggOrganizer/aux"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Egg int32

const (
	Egg_EDIBLE         Egg = 1
	Egg_SUPERFOOD      Egg = 2
	Egg_MEDICAL        Egg = 3
	Egg_ROCKET_FUEL    Egg = 4
	Egg_SUPER_MATERIAL Egg = 5
	Egg_FUSION         Egg = 6
	Egg_QUANTUM        Egg = 7
	Egg_IMMORTALITY    Egg = 8
	Egg_TACHYON        Egg = 9
	Egg_GRAVITON       Egg = 10
	Egg_DILITHIUM      Egg = 11
	Egg_PRODIGY        Egg = 12
	Egg_TERRAFORM      Egg = 13
	Egg_ANTIMATTER     Egg = 14
	Egg_DARK_MATTER    Egg = 15
	Egg_AI             Egg = 16
	Egg_NEBULA         Egg = 17
	Egg_UNIVERSE       Egg = 18
	Egg_ENLIGHTENMENT  Egg = 19
	Egg_CHOCOLATE      Egg = 100
	Egg_EASTER         Egg = 101
	Egg_WATERBALLOON   Egg = 102
	Egg_FIREWORK       Egg = 103
	Egg_PUMPKIN        Egg = 104
	Egg_UNKNOWN        Egg = 1000
)

// Enum value maps for Egg.
var (
	Egg_name = map[int32]string{
		1:    "EDIBLE",
		2:    "SUPERFOOD",
		3:    "MEDICAL",
		4:    "ROCKET_FUEL",
		5:    "SUPER_MATERIAL",
		6:    "FUSION",
		7:    "QUANTUM",
		8:    "IMMORTALITY",
		9:    "TACHYON",
		10:   "GRAVITON",
		11:   "DILITHIUM",
		12:   "PRODIGY",
		13:   "TERRAFORM",
		14:   "ANTIMATTER",
		15:   "DARK_MATTER",
		16:   "AI",
		17:   "NEBULA",
		18:   "UNIVERSE",
		19:   "ENLIGHTENMENT",
		100:  "CHOCOLATE",
		101:  "EASTER",
		102:  "WATERBALLOON",
		103:  "FIREWORK",
		104:  "PUMPKIN",
		1000: "UNKNOWN",
	}
	Egg_value = map[string]int32{
		"EDIBLE":         1,
		"SUPERFOOD":      2,
		"MEDICAL":        3,
		"ROCKET_FUEL":    4,
		"SUPER_MATERIAL": 5,
		"FUSION":         6,
		"QUANTUM":        7,
		"IMMORTALITY":    8,
		"TACHYON":        9,
		"GRAVITON":       10,
		"DILITHIUM":      11,
		"PRODIGY":        12,
		"TERRAFORM":      13,
		"ANTIMATTER":     14,
		"DARK_MATTER":    15,
		"AI":             16,
		"NEBULA":         17,
		"UNIVERSE":       18,
		"ENLIGHTENMENT":  19,
		"CHOCOLATE":      100,
		"EASTER":         101,
		"WATERBALLOON":   102,
		"FIREWORK":       103,
		"PUMPKIN":        104,
		"UNKNOWN":        1000,
	}
)

func (x Egg) Enum() *Egg {
	p := new(Egg)
	*p = x
	return p
}

func (x Egg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Egg) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[0].Descriptor()
}

func (Egg) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[0]
}

func (x Egg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Egg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Egg(num)
	return nil
}

// Deprecated: Use Egg.Descriptor instead.
func (Egg) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0}
}

type FarmType int32

const (
	FarmType_EMPTY    FarmType = 1
	FarmType_HOME     FarmType = 2
	FarmType_CONTRACT FarmType = 3
)

// Enum value maps for FarmType.
var (
	FarmType_name = map[int32]string{
		1: "EMPTY",
		2: "HOME",
		3: "CONTRACT",
	}
	FarmType_value = map[string]int32{
		"EMPTY":    1,
		"HOME":     2,
		"CONTRACT": 3,
	}
)

func (x FarmType) Enum() *FarmType {
	p := new(FarmType)
	*p = x
	return p
}

func (x FarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[1].Descriptor()
}

func (FarmType) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[1]
}

func (x FarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FarmType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FarmType(num)
	return nil
}

// Deprecated: Use FarmType.Descriptor instead.
func (FarmType) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{1}
}

type GoalType int32

const (
	GoalType_EGGS_LAID    GoalType = 1
	GoalType_UNKNOWN_GOAL GoalType = 100
)

// Enum value maps for GoalType.
var (
	GoalType_name = map[int32]string{
		1:   "EGGS_LAID",
		100: "UNKNOWN_GOAL",
	}
	GoalType_value = map[string]int32{
		"EGGS_LAID":    1,
		"UNKNOWN_GOAL": 100,
	}
)

func (x GoalType) Enum() *GoalType {
	p := new(GoalType)
	*p = x
	return p
}

func (x GoalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[2].Descriptor()
}

func (GoalType) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[2]
}

func (x GoalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoalType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoalType(num)
	return nil
}

// Deprecated: Use GoalType.Descriptor instead.
func (GoalType) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{2}
}

type RewardType int32

const (
	RewardType_CASH               RewardType = 1
	RewardType_GOLD               RewardType = 2
	RewardType_SOUL_EGGS          RewardType = 3
	RewardType_EGGS_OF_PROPHECY   RewardType = 4
	RewardType_EPIC_RESEARCH_ITEM RewardType = 5
	RewardType_PIGGY_FILL         RewardType = 6
	RewardType_PIGGY_MULTIPLIER   RewardType = 7
	RewardType_PIGGY_LEVEL_BUMP   RewardType = 8
	RewardType_BOOST              RewardType = 9
	RewardType_BOOST_TOKEN        RewardType = 10
	RewardType_UNKNOWN_REWARD     RewardType = 100
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		1:   "CASH",
		2:   "GOLD",
		3:   "SOUL_EGGS",
		4:   "EGGS_OF_PROPHECY",
		5:   "EPIC_RESEARCH_ITEM",
		6:   "PIGGY_FILL",
		7:   "PIGGY_MULTIPLIER",
		8:   "PIGGY_LEVEL_BUMP",
		9:   "BOOST",
		10:  "BOOST_TOKEN",
		100: "UNKNOWN_REWARD",
	}
	RewardType_value = map[string]int32{
		"CASH":               1,
		"GOLD":               2,
		"SOUL_EGGS":          3,
		"EGGS_OF_PROPHECY":   4,
		"EPIC_RESEARCH_ITEM": 5,
		"PIGGY_FILL":         6,
		"PIGGY_MULTIPLIER":   7,
		"PIGGY_LEVEL_BUMP":   8,
		"BOOST":              9,
		"BOOST_TOKEN":        10,
		"UNKNOWN_REWARD":     100,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[3].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[3]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RewardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RewardType(num)
	return nil
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{3}
}

type EggIncFirstContactResponse_ErrorCodes int32

const (
	EggIncFirstContactResponse_NO_ERROR                 EggIncFirstContactResponse_ErrorCodes = 0
	EggIncFirstContactResponse_EXISTING_USER_W_GAMER_ID EggIncFirstContactResponse_ErrorCodes = 1
	EggIncFirstContactResponse_USER_NOT_FOUND           EggIncFirstContactResponse_ErrorCodes = 2
	EggIncFirstContactResponse_BACKUP_CONFLICT          EggIncFirstContactResponse_ErrorCodes = 3
)

// Enum value maps for EggIncFirstContactResponse_ErrorCodes.
var (
	EggIncFirstContactResponse_ErrorCodes_name = map[int32]string{
		0: "NO_ERROR",
		1: "EXISTING_USER_W_GAMER_ID",
		2: "USER_NOT_FOUND",
		3: "BACKUP_CONFLICT",
	}
	EggIncFirstContactResponse_ErrorCodes_value = map[string]int32{
		"NO_ERROR":                 0,
		"EXISTING_USER_W_GAMER_ID": 1,
		"USER_NOT_FOUND":           2,
		"BACKUP_CONFLICT":          3,
	}
)

func (x EggIncFirstContactResponse_ErrorCodes) Enum() *EggIncFirstContactResponse_ErrorCodes {
	p := new(EggIncFirstContactResponse_ErrorCodes)
	*p = x
	return p
}

func (x EggIncFirstContactResponse_ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EggIncFirstContactResponse_ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[4].Descriptor()
}

func (EggIncFirstContactResponse_ErrorCodes) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[4]
}

func (x EggIncFirstContactResponse_ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EggIncFirstContactResponse_ErrorCodes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EggIncFirstContactResponse_ErrorCodes(num)
	return nil
}

// Deprecated: Use EggIncFirstContactResponse_ErrorCodes.Descriptor instead.
func (EggIncFirstContactResponse_ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{2, 0}
}

type MissionInfo_Spaceship int32

const (
	MissionInfo_CHICKEN_ONE         MissionInfo_Spaceship = 0
	MissionInfo_CHICKEN_NINE        MissionInfo_Spaceship = 1
	MissionInfo_CHICKEN_HEAVY       MissionInfo_Spaceship = 2
	MissionInfo_BCR                 MissionInfo_Spaceship = 3
	MissionInfo_MILLENIUM_CHICKEN   MissionInfo_Spaceship = 4
	MissionInfo_CORELLIHEN_CORVETTE MissionInfo_Spaceship = 5
	MissionInfo_GALEGGTICA          MissionInfo_Spaceship = 6
	MissionInfo_CHICKFIANT          MissionInfo_Spaceship = 7
	MissionInfo_VOYEGGER            MissionInfo_Spaceship = 8
	MissionInfo_HENERPRISE          MissionInfo_Spaceship = 9
)

// Enum value maps for MissionInfo_Spaceship.
var (
	MissionInfo_Spaceship_name = map[int32]string{
		0: "CHICKEN_ONE",
		1: "CHICKEN_NINE",
		2: "CHICKEN_HEAVY",
		3: "BCR",
		4: "MILLENIUM_CHICKEN",
		5: "CORELLIHEN_CORVETTE",
		6: "GALEGGTICA",
		7: "CHICKFIANT",
		8: "VOYEGGER",
		9: "HENERPRISE",
	}
	MissionInfo_Spaceship_value = map[string]int32{
		"CHICKEN_ONE":         0,
		"CHICKEN_NINE":        1,
		"CHICKEN_HEAVY":       2,
		"BCR":                 3,
		"MILLENIUM_CHICKEN":   4,
		"CORELLIHEN_CORVETTE": 5,
		"GALEGGTICA":          6,
		"CHICKFIANT":          7,
		"VOYEGGER":            8,
		"HENERPRISE":          9,
	}
)

func (x MissionInfo_Spaceship) Enum() *MissionInfo_Spaceship {
	p := new(MissionInfo_Spaceship)
	*p = x
	return p
}

func (x MissionInfo_Spaceship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_Spaceship) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[5].Descriptor()
}

func (MissionInfo_Spaceship) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[5]
}

func (x MissionInfo_Spaceship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionInfo_Spaceship) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionInfo_Spaceship(num)
	return nil
}

// Deprecated: Use MissionInfo_Spaceship.Descriptor instead.
func (MissionInfo_Spaceship) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{50, 0}
}

type MissionInfo_Status int32

const (
	MissionInfo_FUELING           MissionInfo_Status = 0
	MissionInfo_PREPARE_TO_LAUNCH MissionInfo_Status = 5
	MissionInfo_EXPLORING         MissionInfo_Status = 10
	MissionInfo_RETURNED          MissionInfo_Status = 15
	MissionInfo_ANALYZING         MissionInfo_Status = 16
	MissionInfo_COMPLETE          MissionInfo_Status = 20
	MissionInfo_ARCHIVED          MissionInfo_Status = 25
)

// Enum value maps for MissionInfo_Status.
var (
	MissionInfo_Status_name = map[int32]string{
		0:  "FUELING",
		5:  "PREPARE_TO_LAUNCH",
		10: "EXPLORING",
		15: "RETURNED",
		16: "ANALYZING",
		20: "COMPLETE",
		25: "ARCHIVED",
	}
	MissionInfo_Status_value = map[string]int32{
		"FUELING":           0,
		"PREPARE_TO_LAUNCH": 5,
		"EXPLORING":         10,
		"RETURNED":          15,
		"ANALYZING":         16,
		"COMPLETE":          20,
		"ARCHIVED":          25,
	}
)

func (x MissionInfo_Status) Enum() *MissionInfo_Status {
	p := new(MissionInfo_Status)
	*p = x
	return p
}

func (x MissionInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[6].Descriptor()
}

func (MissionInfo_Status) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[6]
}

func (x MissionInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionInfo_Status(num)
	return nil
}

// Deprecated: Use MissionInfo_Status.Descriptor instead.
func (MissionInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{50, 1}
}

type MissionInfo_DurationType int32

const (
	MissionInfo_SHORT    MissionInfo_DurationType = 0
	MissionInfo_LONG     MissionInfo_DurationType = 1
	MissionInfo_EPIC     MissionInfo_DurationType = 2
	MissionInfo_TUTORIAL MissionInfo_DurationType = 3
)

// Enum value maps for MissionInfo_DurationType.
var (
	MissionInfo_DurationType_name = map[int32]string{
		0: "SHORT",
		1: "LONG",
		2: "EPIC",
		3: "TUTORIAL",
	}
	MissionInfo_DurationType_value = map[string]int32{
		"SHORT":    0,
		"LONG":     1,
		"EPIC":     2,
		"TUTORIAL": 3,
	}
)

func (x MissionInfo_DurationType) Enum() *MissionInfo_DurationType {
	p := new(MissionInfo_DurationType)
	*p = x
	return p
}

func (x MissionInfo_DurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_DurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[7].Descriptor()
}

func (MissionInfo_DurationType) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[7]
}

func (x MissionInfo_DurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionInfo_DurationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionInfo_DurationType(num)
	return nil
}

// Deprecated: Use MissionInfo_DurationType.Descriptor instead.
func (MissionInfo_DurationType) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{50, 2}
}

type ArtifactSpec_Name int32

const (
	ArtifactSpec_LUNAR_TOTEM               ArtifactSpec_Name = 0
	ArtifactSpec_NEODYMIUM_MEDALLION       ArtifactSpec_Name = 3
	ArtifactSpec_BEAK_OF_MIDAS             ArtifactSpec_Name = 4
	ArtifactSpec_LIGHT_OF_EGGENDIL         ArtifactSpec_Name = 5
	ArtifactSpec_DEMETERS_NECKLACE         ArtifactSpec_Name = 6
	ArtifactSpec_VIAL_MARTIAN_DUST         ArtifactSpec_Name = 7
	ArtifactSpec_ORNATE_GUSSET             ArtifactSpec_Name = 8
	ArtifactSpec_THE_CHALICE               ArtifactSpec_Name = 9
	ArtifactSpec_BOOK_OF_BASAN             ArtifactSpec_Name = 10
	ArtifactSpec_PHOENIX_FEATHER           ArtifactSpec_Name = 11
	ArtifactSpec_TUNGSTEN_ANKH             ArtifactSpec_Name = 12
	ArtifactSpec_AURELIAN_BROOCH           ArtifactSpec_Name = 21
	ArtifactSpec_CARVED_RAINSTICK          ArtifactSpec_Name = 22
	ArtifactSpec_PUZZLE_CUBE               ArtifactSpec_Name = 23
	ArtifactSpec_QUANTUM_METRONOME         ArtifactSpec_Name = 24
	ArtifactSpec_SHIP_IN_A_BOTTLE          ArtifactSpec_Name = 25
	ArtifactSpec_TACHYON_DEFLECTOR         ArtifactSpec_Name = 26
	ArtifactSpec_INTERSTELLAR_COMPASS      ArtifactSpec_Name = 27
	ArtifactSpec_DILITHIUM_MONOCLE         ArtifactSpec_Name = 28
	ArtifactSpec_TITANIUM_ACTUATOR         ArtifactSpec_Name = 29
	ArtifactSpec_MERCURYS_LENS             ArtifactSpec_Name = 30
	ArtifactSpec_TACHYON_STONE             ArtifactSpec_Name = 1
	ArtifactSpec_DILITHIUM_STONE           ArtifactSpec_Name = 31
	ArtifactSpec_SHELL_STONE               ArtifactSpec_Name = 32
	ArtifactSpec_LUNAR_STONE               ArtifactSpec_Name = 33
	ArtifactSpec_SOUL_STONE                ArtifactSpec_Name = 34
	ArtifactSpec_PROPHECY_STONE            ArtifactSpec_Name = 39
	ArtifactSpec_QUANTUM_STONE             ArtifactSpec_Name = 36
	ArtifactSpec_TERRA_STONE               ArtifactSpec_Name = 37
	ArtifactSpec_LIFE_STONE                ArtifactSpec_Name = 38
	ArtifactSpec_CLARITY_STONE             ArtifactSpec_Name = 40
	ArtifactSpec_EXTRATERRESTRIAL_ALUMINUM ArtifactSpec_Name = 13
	ArtifactSpec_ANCIENT_TUNGSTEN          ArtifactSpec_Name = 14
	ArtifactSpec_SPACE_ROCKS               ArtifactSpec_Name = 15
	ArtifactSpec_ALIEN_WOOD                ArtifactSpec_Name = 16
	ArtifactSpec_GOLD_METEORITE            ArtifactSpec_Name = 17
	ArtifactSpec_TAU_CETI_GEODE            ArtifactSpec_Name = 18
	ArtifactSpec_CENTAURIAN_STEEL          ArtifactSpec_Name = 19
	ArtifactSpec_ERIDANI_FEATHER           ArtifactSpec_Name = 20
	ArtifactSpec_DRONE_PARTS               ArtifactSpec_Name = 35
	ArtifactSpec_CELESTIAL_BRONZE          ArtifactSpec_Name = 41
	ArtifactSpec_LALANDE_HIDE              ArtifactSpec_Name = 42
	ArtifactSpec_SOLAR_TITANIUM            ArtifactSpec_Name = 43
	ArtifactSpec_TACHYON_STONE_FRAGMENT    ArtifactSpec_Name = 2
	ArtifactSpec_DILITHIUM_STONE_FRAGMENT  ArtifactSpec_Name = 44
	ArtifactSpec_SHELL_STONE_FRAGMENT      ArtifactSpec_Name = 45
	ArtifactSpec_LUNAR_STONE_FRAGMENT      ArtifactSpec_Name = 46
	ArtifactSpec_SOUL_STONE_FRAGMENT       ArtifactSpec_Name = 47
	ArtifactSpec_PROPHECY_STONE_FRAGMENT   ArtifactSpec_Name = 48
	ArtifactSpec_QUANTUM_STONE_FRAGMENT    ArtifactSpec_Name = 49
	ArtifactSpec_TERRA_STONE_FRAGMENT      ArtifactSpec_Name = 50
	ArtifactSpec_LIFE_STONE_FRAGMENT       ArtifactSpec_Name = 51
	ArtifactSpec_CLARITY_STONE_FRAGMENT    ArtifactSpec_Name = 52
	ArtifactSpec_UNKNOWN                   ArtifactSpec_Name = 10000
)

// Enum value maps for ArtifactSpec_Name.
var (
	ArtifactSpec_Name_name = map[int32]string{
		0:     "LUNAR_TOTEM",
		3:     "NEODYMIUM_MEDALLION",
		4:     "BEAK_OF_MIDAS",
		5:     "LIGHT_OF_EGGENDIL",
		6:     "DEMETERS_NECKLACE",
		7:     "VIAL_MARTIAN_DUST",
		8:     "ORNATE_GUSSET",
		9:     "THE_CHALICE",
		10:    "BOOK_OF_BASAN",
		11:    "PHOENIX_FEATHER",
		12:    "TUNGSTEN_ANKH",
		21:    "AURELIAN_BROOCH",
		22:    "CARVED_RAINSTICK",
		23:    "PUZZLE_CUBE",
		24:    "QUANTUM_METRONOME",
		25:    "SHIP_IN_A_BOTTLE",
		26:    "TACHYON_DEFLECTOR",
		27:    "INTERSTELLAR_COMPASS",
		28:    "DILITHIUM_MONOCLE",
		29:    "TITANIUM_ACTUATOR",
		30:    "MERCURYS_LENS",
		1:     "TACHYON_STONE",
		31:    "DILITHIUM_STONE",
		32:    "SHELL_STONE",
		33:    "LUNAR_STONE",
		34:    "SOUL_STONE",
		39:    "PROPHECY_STONE",
		36:    "QUANTUM_STONE",
		37:    "TERRA_STONE",
		38:    "LIFE_STONE",
		40:    "CLARITY_STONE",
		13:    "EXTRATERRESTRIAL_ALUMINUM",
		14:    "ANCIENT_TUNGSTEN",
		15:    "SPACE_ROCKS",
		16:    "ALIEN_WOOD",
		17:    "GOLD_METEORITE",
		18:    "TAU_CETI_GEODE",
		19:    "CENTAURIAN_STEEL",
		20:    "ERIDANI_FEATHER",
		35:    "DRONE_PARTS",
		41:    "CELESTIAL_BRONZE",
		42:    "LALANDE_HIDE",
		43:    "SOLAR_TITANIUM",
		2:     "TACHYON_STONE_FRAGMENT",
		44:    "DILITHIUM_STONE_FRAGMENT",
		45:    "SHELL_STONE_FRAGMENT",
		46:    "LUNAR_STONE_FRAGMENT",
		47:    "SOUL_STONE_FRAGMENT",
		48:    "PROPHECY_STONE_FRAGMENT",
		49:    "QUANTUM_STONE_FRAGMENT",
		50:    "TERRA_STONE_FRAGMENT",
		51:    "LIFE_STONE_FRAGMENT",
		52:    "CLARITY_STONE_FRAGMENT",
		10000: "UNKNOWN",
	}
	ArtifactSpec_Name_value = map[string]int32{
		"LUNAR_TOTEM":               0,
		"NEODYMIUM_MEDALLION":       3,
		"BEAK_OF_MIDAS":             4,
		"LIGHT_OF_EGGENDIL":         5,
		"DEMETERS_NECKLACE":         6,
		"VIAL_MARTIAN_DUST":         7,
		"ORNATE_GUSSET":             8,
		"THE_CHALICE":               9,
		"BOOK_OF_BASAN":             10,
		"PHOENIX_FEATHER":           11,
		"TUNGSTEN_ANKH":             12,
		"AURELIAN_BROOCH":           21,
		"CARVED_RAINSTICK":          22,
		"PUZZLE_CUBE":               23,
		"QUANTUM_METRONOME":         24,
		"SHIP_IN_A_BOTTLE":          25,
		"TACHYON_DEFLECTOR":         26,
		"INTERSTELLAR_COMPASS":      27,
		"DILITHIUM_MONOCLE":         28,
		"TITANIUM_ACTUATOR":         29,
		"MERCURYS_LENS":             30,
		"TACHYON_STONE":             1,
		"DILITHIUM_STONE":           31,
		"SHELL_STONE":               32,
		"LUNAR_STONE":               33,
		"SOUL_STONE":                34,
		"PROPHECY_STONE":            39,
		"QUANTUM_STONE":             36,
		"TERRA_STONE":               37,
		"LIFE_STONE":                38,
		"CLARITY_STONE":             40,
		"EXTRATERRESTRIAL_ALUMINUM": 13,
		"ANCIENT_TUNGSTEN":          14,
		"SPACE_ROCKS":               15,
		"ALIEN_WOOD":                16,
		"GOLD_METEORITE":            17,
		"TAU_CETI_GEODE":            18,
		"CENTAURIAN_STEEL":          19,
		"ERIDANI_FEATHER":           20,
		"DRONE_PARTS":               35,
		"CELESTIAL_BRONZE":          41,
		"LALANDE_HIDE":              42,
		"SOLAR_TITANIUM":            43,
		"TACHYON_STONE_FRAGMENT":    2,
		"DILITHIUM_STONE_FRAGMENT":  44,
		"SHELL_STONE_FRAGMENT":      45,
		"LUNAR_STONE_FRAGMENT":      46,
		"SOUL_STONE_FRAGMENT":       47,
		"PROPHECY_STONE_FRAGMENT":   48,
		"QUANTUM_STONE_FRAGMENT":    49,
		"TERRA_STONE_FRAGMENT":      50,
		"LIFE_STONE_FRAGMENT":       51,
		"CLARITY_STONE_FRAGMENT":    52,
		"UNKNOWN":                   10000,
	}
)

func (x ArtifactSpec_Name) Enum() *ArtifactSpec_Name {
	p := new(ArtifactSpec_Name)
	*p = x
	return p
}

func (x ArtifactSpec_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[8].Descriptor()
}

func (ArtifactSpec_Name) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[8]
}

func (x ArtifactSpec_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Name) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Name(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Name.Descriptor instead.
func (ArtifactSpec_Name) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{51, 0}
}

type ArtifactSpec_Level int32

const (
	ArtifactSpec_INFERIOR ArtifactSpec_Level = 0
	ArtifactSpec_LESSER   ArtifactSpec_Level = 1
	ArtifactSpec_NORMAL   ArtifactSpec_Level = 2
	ArtifactSpec_GREATER  ArtifactSpec_Level = 3
	ArtifactSpec_SUPERIOR ArtifactSpec_Level = 4
)

// Enum value maps for ArtifactSpec_Level.
var (
	ArtifactSpec_Level_name = map[int32]string{
		0: "INFERIOR",
		1: "LESSER",
		2: "NORMAL",
		3: "GREATER",
		4: "SUPERIOR",
	}
	ArtifactSpec_Level_value = map[string]int32{
		"INFERIOR": 0,
		"LESSER":   1,
		"NORMAL":   2,
		"GREATER":  3,
		"SUPERIOR": 4,
	}
)

func (x ArtifactSpec_Level) Enum() *ArtifactSpec_Level {
	p := new(ArtifactSpec_Level)
	*p = x
	return p
}

func (x ArtifactSpec_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[9].Descriptor()
}

func (ArtifactSpec_Level) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[9]
}

func (x ArtifactSpec_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Level) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Level(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Level.Descriptor instead.
func (ArtifactSpec_Level) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{51, 1}
}

type ArtifactSpec_Rarity int32

const (
	ArtifactSpec_COMMON    ArtifactSpec_Rarity = 0
	ArtifactSpec_RARE      ArtifactSpec_Rarity = 1
	ArtifactSpec_EPIC      ArtifactSpec_Rarity = 2
	ArtifactSpec_LEGENDARY ArtifactSpec_Rarity = 3
)

// Enum value maps for ArtifactSpec_Rarity.
var (
	ArtifactSpec_Rarity_name = map[int32]string{
		0: "COMMON",
		1: "RARE",
		2: "EPIC",
		3: "LEGENDARY",
	}
	ArtifactSpec_Rarity_value = map[string]int32{
		"COMMON":    0,
		"RARE":      1,
		"EPIC":      2,
		"LEGENDARY": 3,
	}
)

func (x ArtifactSpec_Rarity) Enum() *ArtifactSpec_Rarity {
	p := new(ArtifactSpec_Rarity)
	*p = x
	return p
}

func (x ArtifactSpec_Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[10].Descriptor()
}

func (ArtifactSpec_Rarity) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[10]
}

func (x ArtifactSpec_Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Rarity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Rarity(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Rarity.Descriptor instead.
func (ArtifactSpec_Rarity) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{51, 2}
}

type ArtifactSpec_Type int32

const (
	ArtifactSpec_ARTIFACT         ArtifactSpec_Type = 0
	ArtifactSpec_STONE            ArtifactSpec_Type = 1
	ArtifactSpec_INGREDIENT       ArtifactSpec_Type = 2
	ArtifactSpec_STONE_INGREDIENT ArtifactSpec_Type = 3
)

// Enum value maps for ArtifactSpec_Type.
var (
	ArtifactSpec_Type_name = map[int32]string{
		0: "ARTIFACT",
		1: "STONE",
		2: "INGREDIENT",
		3: "STONE_INGREDIENT",
	}
	ArtifactSpec_Type_value = map[string]int32{
		"ARTIFACT":         0,
		"STONE":            1,
		"INGREDIENT":       2,
		"STONE_INGREDIENT": 3,
	}
)

func (x ArtifactSpec_Type) Enum() *ArtifactSpec_Type {
	p := new(ArtifactSpec_Type)
	*p = x
	return p
}

func (x ArtifactSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[11].Descriptor()
}

func (ArtifactSpec_Type) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[11]
}

func (x ArtifactSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Type(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Type.Descriptor instead.
func (ArtifactSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{51, 3}
}

type SaveBackupResponse_ErrorCodes int32

const (
	SaveBackupResponse_NO_ERROR            SaveBackupResponse_ErrorCodes = 0
	SaveBackupResponse_USER_NOT_FOUND      SaveBackupResponse_ErrorCodes = 1
	SaveBackupResponse_COULD_NOT_OVERWRITE SaveBackupResponse_ErrorCodes = 2
	SaveBackupResponse_BACKUP_OFFERED      SaveBackupResponse_ErrorCodes = 3
	SaveBackupResponse_BAD_USER_ID         SaveBackupResponse_ErrorCodes = 4
)

// Enum value maps for SaveBackupResponse_ErrorCodes.
var (
	SaveBackupResponse_ErrorCodes_name = map[int32]string{
		0: "NO_ERROR",
		1: "USER_NOT_FOUND",
		2: "COULD_NOT_OVERWRITE",
		3: "BACKUP_OFFERED",
		4: "BAD_USER_ID",
	}
	SaveBackupResponse_ErrorCodes_value = map[string]int32{
		"NO_ERROR":            0,
		"USER_NOT_FOUND":      1,
		"COULD_NOT_OVERWRITE": 2,
		"BACKUP_OFFERED":      3,
		"BAD_USER_ID":         4,
	}
)

func (x SaveBackupResponse_ErrorCodes) Enum() *SaveBackupResponse_ErrorCodes {
	p := new(SaveBackupResponse_ErrorCodes)
	*p = x
	return p
}

func (x SaveBackupResponse_ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaveBackupResponse_ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_ei_ei_proto_enumTypes[12].Descriptor()
}

func (SaveBackupResponse_ErrorCodes) Type() protoreflect.EnumType {
	return &file_ei_ei_proto_enumTypes[12]
}

func (x SaveBackupResponse_ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SaveBackupResponse_ErrorCodes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SaveBackupResponse_ErrorCodes(num)
	return nil
}

// Deprecated: Use SaveBackupResponse_ErrorCodes.Descriptor instead.
func (SaveBackupResponse_ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{73, 0}
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           *string              `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	EiUserId         *string              `protobuf:"bytes,18,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	GameServicesId   *string              `protobuf:"bytes,16,opt,name=game_services_id,json=gameServicesId" json:"game_services_id,omitempty"`
	DeviceId         *string              `protobuf:"bytes,17,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	UserName         *string              `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	ApproxTime       *float64             `protobuf:"fixed64,3,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	Version          *uint32              `protobuf:"varint,21,opt,name=version,def=0" json:"version,omitempty"`
	ForceOfferBackup *bool                `protobuf:"varint,20,opt,name=force_offer_backup,json=forceOfferBackup" json:"force_offer_backup,omitempty"`
	ForceBackup      *bool                `protobuf:"varint,22,opt,name=force_backup,json=forceBackup" json:"force_backup,omitempty"`
	Settings         *Backup_Settings     `protobuf:"bytes,4,opt,name=settings" json:"settings,omitempty"`
	Tutorial         *Backup_Tutorial     `protobuf:"bytes,5,opt,name=tutorial" json:"tutorial,omitempty"`
	Stats            *Backup_Stats        `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
	Game             *Backup_Game         `protobuf:"bytes,7,opt,name=game" json:"game,omitempty"`
	Artifacts        *Backup_Artifacts    `protobuf:"bytes,14,opt,name=artifacts" json:"artifacts,omitempty"`
	Sim              *Backup_Simulation   `protobuf:"bytes,8,opt,name=sim" json:"sim,omitempty"`
	Farms            []*Backup_Simulation `protobuf:"bytes,12,rep,name=farms" json:"farms,omitempty"`
	Mission          *Backup_Mission      `protobuf:"bytes,9,opt,name=mission" json:"mission,omitempty"`
	Misc             *Backup_Misc         `protobuf:"bytes,10,opt,name=misc" json:"misc,omitempty"`
	Contracts        *MyContracts         `protobuf:"bytes,13,opt,name=contracts" json:"contracts,omitempty"`
	ArtifactsDb      *ArtifactsDB         `protobuf:"bytes,15,opt,name=artifacts_db,json=artifactsDb" json:"artifacts_db,omitempty"`
	Checksum         *uint64              `protobuf:"varint,100,opt,name=checksum" json:"checksum,omitempty"`
	Signature        *string              `protobuf:"bytes,101,opt,name=signature" json:"signature,omitempty"`
}

// Default values for Backup fields.
const (
	Default_Backup_Version = uint32(0)
)

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0}
}

func (x *Backup) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Backup) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *Backup) GetGameServicesId() string {
	if x != nil && x.GameServicesId != nil {
		return *x.GameServicesId
	}
	return ""
}

func (x *Backup) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *Backup) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *Backup) GetApproxTime() float64 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *Backup) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_Backup_Version
}

func (x *Backup) GetForceOfferBackup() bool {
	if x != nil && x.ForceOfferBackup != nil {
		return *x.ForceOfferBackup
	}
	return false
}

func (x *Backup) GetForceBackup() bool {
	if x != nil && x.ForceBackup != nil {
		return *x.ForceBackup
	}
	return false
}

func (x *Backup) GetSettings() *Backup_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Backup) GetTutorial() *Backup_Tutorial {
	if x != nil {
		return x.Tutorial
	}
	return nil
}

func (x *Backup) GetStats() *Backup_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Backup) GetGame() *Backup_Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *Backup) GetArtifacts() *Backup_Artifacts {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *Backup) GetSim() *Backup_Simulation {
	if x != nil {
		return x.Sim
	}
	return nil
}

func (x *Backup) GetFarms() []*Backup_Simulation {
	if x != nil {
		return x.Farms
	}
	return nil
}

func (x *Backup) GetMission() *Backup_Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *Backup) GetMisc() *Backup_Misc {
	if x != nil {
		return x.Misc
	}
	return nil
}

func (x *Backup) GetContracts() *MyContracts {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *Backup) GetArtifactsDb() *ArtifactsDB {
	if x != nil {
		return x.ArtifactsDb
	}
	return nil
}

func (x *Backup) GetChecksum() uint64 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

func (x *Backup) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

type EggIncFirstContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo          *BasicRequestInfo `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	EiUserId       *string           `protobuf:"bytes,4,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	UserId         *string           `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameServicesId *string           `protobuf:"bytes,7,opt,name=game_services_id,json=gameServicesId" json:"game_services_id,omitempty"`
	DeviceId       *string           `protobuf:"bytes,5,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Username       *string           `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	ClientVersion  *uint32           `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Platform       *aux.Platform     `protobuf:"varint,3,opt,name=platform,enum=aux.Platform" json:"platform,omitempty"`
}

func (x *EggIncFirstContactRequest) Reset() {
	*x = EggIncFirstContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggIncFirstContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncFirstContactRequest) ProtoMessage() {}

func (x *EggIncFirstContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncFirstContactRequest.ProtoReflect.Descriptor instead.
func (*EggIncFirstContactRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{1}
}

func (x *EggIncFirstContactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *EggIncFirstContactRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetGameServicesId() string {
	if x != nil && x.GameServicesId != nil {
		return *x.GameServicesId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *EggIncFirstContactRequest) GetPlatform() aux.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return aux.Platform_IOS
}

type EggIncFirstContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EiUserId       *string  `protobuf:"bytes,2,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	IdsTransferred []string `protobuf:"bytes,3,rep,name=ids_transferred,json=idsTransferred" json:"ids_transferred,omitempty"`
	ErrorCode      *uint32  `protobuf:"varint,4,opt,name=error_code,json=errorCode,def=0" json:"error_code,omitempty"`
	ErrorMessage   *string  `protobuf:"bytes,5,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Backup         *Backup  `protobuf:"bytes,1,opt,name=backup" json:"backup,omitempty"`
}

// Default values for EggIncFirstContactResponse fields.
const (
	Default_EggIncFirstContactResponse_ErrorCode = uint32(0)
)

func (x *EggIncFirstContactResponse) Reset() {
	*x = EggIncFirstContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggIncFirstContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncFirstContactResponse) ProtoMessage() {}

func (x *EggIncFirstContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncFirstContactResponse.ProtoReflect.Descriptor instead.
func (*EggIncFirstContactResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{2}
}

func (x *EggIncFirstContactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *EggIncFirstContactResponse) GetIdsTransferred() []string {
	if x != nil {
		return x.IdsTransferred
	}
	return nil
}

func (x *EggIncFirstContactResponse) GetErrorCode() uint32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return Default_EggIncFirstContactResponse_ErrorCode
}

func (x *EggIncFirstContactResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *EggIncFirstContactResponse) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

type EggIncAdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkPriority []aux.AdNetwork `protobuf:"varint,1,rep,name=network_priority,json=networkPriority,enum=aux.AdNetwork" json:"network_priority,omitempty"`
}

func (x *EggIncAdConfig) Reset() {
	*x = EggIncAdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggIncAdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncAdConfig) ProtoMessage() {}

func (x *EggIncAdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncAdConfig.ProtoReflect.Descriptor instead.
func (*EggIncAdConfig) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{3}
}

func (x *EggIncAdConfig) GetNetworkPriority() []aux.AdNetwork {
	if x != nil {
		return x.NetworkPriority
	}
	return nil
}

type DailyGiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentDay       *uint32  `protobuf:"varint,1,opt,name=current_day,json=currentDay" json:"current_day,omitempty"`
	SecondsToNextDay *float64 `protobuf:"fixed64,2,opt,name=seconds_to_next_day,json=secondsToNextDay" json:"seconds_to_next_day,omitempty"`
}

func (x *DailyGiftInfo) Reset() {
	*x = DailyGiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyGiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyGiftInfo) ProtoMessage() {}

func (x *DailyGiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyGiftInfo.ProtoReflect.Descriptor instead.
func (*DailyGiftInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{4}
}

func (x *DailyGiftInfo) GetCurrentDay() uint32 {
	if x != nil && x.CurrentDay != nil {
		return *x.CurrentDay
	}
	return 0
}

func (x *DailyGiftInfo) GetSecondsToNextDay() float64 {
	if x != nil && x.SecondsToNextDay != nil {
		return *x.SecondsToNextDay
	}
	return 0
}

type SalesInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               *string  `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PiggyFull            *bool    `protobuf:"varint,2,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull       *bool    `protobuf:"varint,3,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	SecondsFullRealtime  *float64 `protobuf:"fixed64,4,opt,name=seconds_full_realtime,json=secondsFullRealtime" json:"seconds_full_realtime,omitempty"`
	SecondsFullGametime  *float64 `protobuf:"fixed64,5,opt,name=seconds_full_gametime,json=secondsFullGametime" json:"seconds_full_gametime,omitempty"`
	LostIncrements       *uint32  `protobuf:"varint,7,opt,name=lost_increments,json=lostIncrements" json:"lost_increments,omitempty"`
	CurrentClientVersion *uint32  `protobuf:"varint,10,opt,name=current_client_version,json=currentClientVersion" json:"current_client_version,omitempty"`
}

func (x *SalesInfoRequest) Reset() {
	*x = SalesInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInfoRequest) ProtoMessage() {}

func (x *SalesInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInfoRequest.ProtoReflect.Descriptor instead.
func (*SalesInfoRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{5}
}

func (x *SalesInfoRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SalesInfoRequest) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *SalesInfoRequest) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *SalesInfoRequest) GetSecondsFullRealtime() float64 {
	if x != nil && x.SecondsFullRealtime != nil {
		return *x.SecondsFullRealtime
	}
	return 0
}

func (x *SalesInfoRequest) GetSecondsFullGametime() float64 {
	if x != nil && x.SecondsFullGametime != nil {
		return *x.SecondsFullGametime
	}
	return 0
}

func (x *SalesInfoRequest) GetLostIncrements() uint32 {
	if x != nil && x.LostIncrements != nil {
		return *x.LostIncrements
	}
	return 0
}

func (x *SalesInfoRequest) GetCurrentClientVersion() uint32 {
	if x != nil && x.CurrentClientVersion != nil {
		return *x.CurrentClientVersion
	}
	return 0
}

type IAPSaleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId        *string  `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	SecondsRemaining *float64 `protobuf:"fixed64,2,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	DiscountString   *string  `protobuf:"bytes,3,opt,name=discount_string,json=discountString" json:"discount_string,omitempty"`
	SaleId           *string  `protobuf:"bytes,4,opt,name=sale_id,json=saleId" json:"sale_id,omitempty"`
}

func (x *IAPSaleEntry) Reset() {
	*x = IAPSaleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IAPSaleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAPSaleEntry) ProtoMessage() {}

func (x *IAPSaleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAPSaleEntry.ProtoReflect.Descriptor instead.
func (*IAPSaleEntry) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{6}
}

func (x *IAPSaleEntry) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *IAPSaleEntry) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *IAPSaleEntry) GetDiscountString() string {
	if x != nil && x.DiscountString != nil {
		return *x.DiscountString
	}
	return ""
}

func (x *IAPSaleEntry) GetSaleId() string {
	if x != nil && x.SaleId != nil {
		return *x.SaleId
	}
	return ""
}

type SalesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales []*IAPSaleEntry `protobuf:"bytes,1,rep,name=sales" json:"sales,omitempty"`
}

func (x *SalesInfo) Reset() {
	*x = SalesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInfo) ProtoMessage() {}

func (x *SalesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInfo.ProtoReflect.Descriptor instead.
func (*SalesInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{7}
}

func (x *SalesInfo) GetSales() []*IAPSaleEntry {
	if x != nil {
		return x.Sales
	}
	return nil
}

type EggIncEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier       *string  `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	SecondsRemaining *float64 `protobuf:"fixed64,2,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Type             *string  `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Multiplier       *float64 `protobuf:"fixed64,4,opt,name=multiplier" json:"multiplier,omitempty"`
	Subtitle         *string  `protobuf:"bytes,5,opt,name=subtitle" json:"subtitle,omitempty"`
}

func (x *EggIncEvent) Reset() {
	*x = EggIncEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggIncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncEvent) ProtoMessage() {}

func (x *EggIncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncEvent.ProtoReflect.Descriptor instead.
func (*EggIncEvent) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{8}
}

func (x *EggIncEvent) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *EggIncEvent) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *EggIncEvent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *EggIncEvent) GetMultiplier() float64 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *EggIncEvent) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

type EggIncCurrentEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*EggIncEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (x *EggIncCurrentEvents) Reset() {
	*x = EggIncCurrentEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggIncCurrentEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncCurrentEvents) ProtoMessage() {}

func (x *EggIncCurrentEvents) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncCurrentEvents.ProtoReflect.Descriptor instead.
func (*EggIncCurrentEvents) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{9}
}

func (x *EggIncCurrentEvents) GetEvents() []*EggIncEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        *string `protobuf:"bytes,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	AdvertisingId   *string `protobuf:"bytes,13,opt,name=advertising_id,json=advertisingId" json:"advertising_id,omitempty"`
	Platform        *string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	FormFactor      *string `protobuf:"bytes,3,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
	DeviceName      *string `protobuf:"bytes,4,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	PlatformVersion *string `protobuf:"bytes,5,opt,name=platform_version,json=platformVersion" json:"platform_version,omitempty"`
	LocaleCountry   *string `protobuf:"bytes,6,opt,name=locale_country,json=localeCountry" json:"locale_country,omitempty"`
	LocaleLanguage  *string `protobuf:"bytes,7,opt,name=locale_language,json=localeLanguage" json:"locale_language,omitempty"`
	GpuVendor       *string `protobuf:"bytes,8,opt,name=gpu_vendor,json=gpuVendor" json:"gpu_vendor,omitempty"`
	GpuModel        *string `protobuf:"bytes,9,opt,name=gpu_model,json=gpuModel" json:"gpu_model,omitempty"`
	DeviceBucket    *string `protobuf:"bytes,10,opt,name=device_bucket,json=deviceBucket" json:"device_bucket,omitempty"`
	ScreenWidth     *uint32 `protobuf:"varint,11,opt,name=screen_width,json=screenWidth" json:"screen_width,omitempty"`
	ScreenHeight    *uint32 `protobuf:"varint,12,opt,name=screen_height,json=screenHeight" json:"screen_height,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceInfo) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *DeviceInfo) GetAdvertisingId() string {
	if x != nil && x.AdvertisingId != nil {
		return *x.AdvertisingId
	}
	return ""
}

func (x *DeviceInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *DeviceInfo) GetFormFactor() string {
	if x != nil && x.FormFactor != nil {
		return *x.FormFactor
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetPlatformVersion() string {
	if x != nil && x.PlatformVersion != nil {
		return *x.PlatformVersion
	}
	return ""
}

func (x *DeviceInfo) GetLocaleCountry() string {
	if x != nil && x.LocaleCountry != nil {
		return *x.LocaleCountry
	}
	return ""
}

func (x *DeviceInfo) GetLocaleLanguage() string {
	if x != nil && x.LocaleLanguage != nil {
		return *x.LocaleLanguage
	}
	return ""
}

func (x *DeviceInfo) GetGpuVendor() string {
	if x != nil && x.GpuVendor != nil {
		return *x.GpuVendor
	}
	return ""
}

func (x *DeviceInfo) GetGpuModel() string {
	if x != nil && x.GpuModel != nil {
		return *x.GpuModel
	}
	return ""
}

func (x *DeviceInfo) GetDeviceBucket() string {
	if x != nil && x.DeviceBucket != nil {
		return *x.DeviceBucket
	}
	return ""
}

func (x *DeviceInfo) GetScreenWidth() uint32 {
	if x != nil && x.ScreenWidth != nil {
		return *x.ScreenWidth
	}
	return 0
}

func (x *DeviceInfo) GetScreenHeight() uint32 {
	if x != nil && x.ScreenHeight != nil {
		return *x.ScreenHeight
	}
	return 0
}

type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionStr            *string  `protobuf:"bytes,1,opt,name=version_str,json=versionStr" json:"version_str,omitempty"`
	Sessions              *uint32  `protobuf:"varint,2,opt,name=sessions" json:"sessions,omitempty"`
	NumPrestiges          *uint32  `protobuf:"varint,3,opt,name=num_prestiges,json=numPrestiges" json:"num_prestiges,omitempty"`
	SoulEggs              *uint64  `protobuf:"varint,4,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	CurrentEgg            *uint32  `protobuf:"varint,5,opt,name=current_egg,json=currentEgg" json:"current_egg,omitempty"`
	GoldEarned            *uint64  `protobuf:"varint,6,opt,name=gold_earned,json=goldEarned" json:"gold_earned,omitempty"`
	GoldSpent             *uint64  `protobuf:"varint,7,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	CurrentMission        *uint32  `protobuf:"varint,8,opt,name=current_mission,json=currentMission" json:"current_mission,omitempty"`
	PiggySize             *uint32  `protobuf:"varint,9,opt,name=piggy_size,json=piggySize" json:"piggy_size,omitempty"`
	NumPiggyBreaks        *uint64  `protobuf:"varint,10,opt,name=num_piggy_breaks,json=numPiggyBreaks" json:"num_piggy_breaks,omitempty"`
	VerifiedPiggyBreaks   *uint64  `protobuf:"varint,29,opt,name=verified_piggy_breaks,json=verifiedPiggyBreaks" json:"verified_piggy_breaks,omitempty"`
	IapPacksPurchased     *uint64  `protobuf:"varint,11,opt,name=iap_packs_purchased,json=iapPacksPurchased" json:"iap_packs_purchased,omitempty"`
	PermitLevel           *uint32  `protobuf:"varint,12,opt,name=permit_level,json=permitLevel" json:"permit_level,omitempty"`
	VideoDoublerUses      *uint64  `protobuf:"varint,15,opt,name=video_doubler_uses,json=videoDoublerUses" json:"video_doubler_uses,omitempty"`
	DroneTakedowns        *uint64  `protobuf:"varint,18,opt,name=drone_takedowns,json=droneTakedowns" json:"drone_takedowns,omitempty"`
	DroneTakedownsElite   *uint64  `protobuf:"varint,19,opt,name=drone_takedowns_elite,json=droneTakedownsElite" json:"drone_takedowns_elite,omitempty"`
	TrophiesUnlocked      *bool    `protobuf:"varint,20,opt,name=trophies_unlocked,json=trophiesUnlocked" json:"trophies_unlocked,omitempty"`
	EggLevel              *float32 `protobuf:"fixed32,21,opt,name=egg_level,json=eggLevel" json:"egg_level,omitempty"`
	StruggleFactor        *float32 `protobuf:"fixed32,22,opt,name=struggle_factor,json=struggleFactor" json:"struggle_factor,omitempty"`
	PiggyFull             *bool    `protobuf:"varint,23,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull        *bool    `protobuf:"varint,24,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	TimePiggyFullRealtime *float64 `protobuf:"fixed64,25,opt,name=time_piggy_full_realtime,json=timePiggyFullRealtime" json:"time_piggy_full_realtime,omitempty"`
	TimePiggyFullGametime *float64 `protobuf:"fixed64,26,opt,name=time_piggy_full_gametime,json=timePiggyFullGametime" json:"time_piggy_full_gametime,omitempty"`
	LostPiggyIncrements   *uint64  `protobuf:"varint,27,opt,name=lost_piggy_increments,json=lostPiggyIncrements" json:"lost_piggy_increments,omitempty"`
	SaleId                *string  `protobuf:"bytes,28,opt,name=sale_id,json=saleId" json:"sale_id,omitempty"`
	UnlimitedChickensUses *uint64  `protobuf:"varint,13,opt,name=unlimited_chickens_uses,json=unlimitedChickensUses" json:"unlimited_chickens_uses,omitempty"`
	RefillUses            *uint64  `protobuf:"varint,14,opt,name=refill_uses,json=refillUses" json:"refill_uses,omitempty"`
	ShortWarpUses         *uint64  `protobuf:"varint,16,opt,name=short_warp_uses,json=shortWarpUses" json:"short_warp_uses,omitempty"`
	LongWarpUses          *uint64  `protobuf:"varint,17,opt,name=long_warp_uses,json=longWarpUses" json:"long_warp_uses,omitempty"`
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{11}
}

func (x *AppInfo) GetVersionStr() string {
	if x != nil && x.VersionStr != nil {
		return *x.VersionStr
	}
	return ""
}

func (x *AppInfo) GetSessions() uint32 {
	if x != nil && x.Sessions != nil {
		return *x.Sessions
	}
	return 0
}

func (x *AppInfo) GetNumPrestiges() uint32 {
	if x != nil && x.NumPrestiges != nil {
		return *x.NumPrestiges
	}
	return 0
}

func (x *AppInfo) GetSoulEggs() uint64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *AppInfo) GetCurrentEgg() uint32 {
	if x != nil && x.CurrentEgg != nil {
		return *x.CurrentEgg
	}
	return 0
}

func (x *AppInfo) GetGoldEarned() uint64 {
	if x != nil && x.GoldEarned != nil {
		return *x.GoldEarned
	}
	return 0
}

func (x *AppInfo) GetGoldSpent() uint64 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

func (x *AppInfo) GetCurrentMission() uint32 {
	if x != nil && x.CurrentMission != nil {
		return *x.CurrentMission
	}
	return 0
}

func (x *AppInfo) GetPiggySize() uint32 {
	if x != nil && x.PiggySize != nil {
		return *x.PiggySize
	}
	return 0
}

func (x *AppInfo) GetNumPiggyBreaks() uint64 {
	if x != nil && x.NumPiggyBreaks != nil {
		return *x.NumPiggyBreaks
	}
	return 0
}

func (x *AppInfo) GetVerifiedPiggyBreaks() uint64 {
	if x != nil && x.VerifiedPiggyBreaks != nil {
		return *x.VerifiedPiggyBreaks
	}
	return 0
}

func (x *AppInfo) GetIapPacksPurchased() uint64 {
	if x != nil && x.IapPacksPurchased != nil {
		return *x.IapPacksPurchased
	}
	return 0
}

func (x *AppInfo) GetPermitLevel() uint32 {
	if x != nil && x.PermitLevel != nil {
		return *x.PermitLevel
	}
	return 0
}

func (x *AppInfo) GetVideoDoublerUses() uint64 {
	if x != nil && x.VideoDoublerUses != nil {
		return *x.VideoDoublerUses
	}
	return 0
}

func (x *AppInfo) GetDroneTakedowns() uint64 {
	if x != nil && x.DroneTakedowns != nil {
		return *x.DroneTakedowns
	}
	return 0
}

func (x *AppInfo) GetDroneTakedownsElite() uint64 {
	if x != nil && x.DroneTakedownsElite != nil {
		return *x.DroneTakedownsElite
	}
	return 0
}

func (x *AppInfo) GetTrophiesUnlocked() bool {
	if x != nil && x.TrophiesUnlocked != nil {
		return *x.TrophiesUnlocked
	}
	return false
}

func (x *AppInfo) GetEggLevel() float32 {
	if x != nil && x.EggLevel != nil {
		return *x.EggLevel
	}
	return 0
}

func (x *AppInfo) GetStruggleFactor() float32 {
	if x != nil && x.StruggleFactor != nil {
		return *x.StruggleFactor
	}
	return 0
}

func (x *AppInfo) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *AppInfo) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *AppInfo) GetTimePiggyFullRealtime() float64 {
	if x != nil && x.TimePiggyFullRealtime != nil {
		return *x.TimePiggyFullRealtime
	}
	return 0
}

func (x *AppInfo) GetTimePiggyFullGametime() float64 {
	if x != nil && x.TimePiggyFullGametime != nil {
		return *x.TimePiggyFullGametime
	}
	return 0
}

func (x *AppInfo) GetLostPiggyIncrements() uint64 {
	if x != nil && x.LostPiggyIncrements != nil {
		return *x.LostPiggyIncrements
	}
	return 0
}

func (x *AppInfo) GetSaleId() string {
	if x != nil && x.SaleId != nil {
		return *x.SaleId
	}
	return ""
}

func (x *AppInfo) GetUnlimitedChickensUses() uint64 {
	if x != nil && x.UnlimitedChickensUses != nil {
		return *x.UnlimitedChickensUses
	}
	return 0
}

func (x *AppInfo) GetRefillUses() uint64 {
	if x != nil && x.RefillUses != nil {
		return *x.RefillUses
	}
	return 0
}

func (x *AppInfo) GetShortWarpUses() uint64 {
	if x != nil && x.ShortWarpUses != nil {
		return *x.ShortWarpUses
	}
	return 0
}

func (x *AppInfo) GetLongWarpUses() uint64 {
	if x != nil && x.LongWarpUses != nil {
		return *x.LongWarpUses
	}
	return 0
}

type ActionKeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *ActionKeyValuePair) Reset() {
	*x = ActionKeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionKeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionKeyValuePair) ProtoMessage() {}

func (x *ActionKeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionKeyValuePair.ProtoReflect.Descriptor instead.
func (*ActionKeyValuePair) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{12}
}

func (x *ActionKeyValuePair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ActionKeyValuePair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GenericAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        *string               `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AdvertisingId *string               `protobuf:"bytes,7,opt,name=advertising_id,json=advertisingId" json:"advertising_id,omitempty"`
	ApproxTime    *float32              `protobuf:"fixed32,2,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	ActionName    *string               `protobuf:"bytes,3,opt,name=action_name,json=actionName" json:"action_name,omitempty"`
	Data          []*ActionKeyValuePair `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	App           *AppInfo              `protobuf:"bytes,5,opt,name=app" json:"app,omitempty"`
	Device        *DeviceInfo           `protobuf:"bytes,6,opt,name=device" json:"device,omitempty"`
}

func (x *GenericAction) Reset() {
	*x = GenericAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericAction) ProtoMessage() {}

func (x *GenericAction) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericAction.ProtoReflect.Descriptor instead.
func (*GenericAction) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{13}
}

func (x *GenericAction) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GenericAction) GetAdvertisingId() string {
	if x != nil && x.AdvertisingId != nil {
		return *x.AdvertisingId
	}
	return ""
}

func (x *GenericAction) GetApproxTime() float32 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *GenericAction) GetActionName() string {
	if x != nil && x.ActionName != nil {
		return *x.ActionName
	}
	return ""
}

func (x *GenericAction) GetData() []*ActionKeyValuePair {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenericAction) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *GenericAction) GetDevice() *DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

type VerifyPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo         *BasicRequestInfo `protobuf:"bytes,6,opt,name=rinfo" json:"rinfo,omitempty"`
	Sku           *string           `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	TransactionId *string           `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Receipt       *string           `protobuf:"bytes,3,opt,name=receipt" json:"receipt,omitempty"`
	Platform      *string           `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	Log           *GenericAction    `protobuf:"bytes,5,opt,name=log" json:"log,omitempty"`
}

func (x *VerifyPurchaseRequest) Reset() {
	*x = VerifyPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPurchaseRequest) ProtoMessage() {}

func (x *VerifyPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPurchaseRequest.ProtoReflect.Descriptor instead.
func (*VerifyPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{14}
}

func (x *VerifyPurchaseRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *VerifyPurchaseRequest) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetReceipt() string {
	if x != nil && x.Receipt != nil {
		return *x.Receipt
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetLog() *GenericAction {
	if x != nil {
		return x.Log
	}
	return nil
}

type VerifyPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified *bool   `protobuf:"varint,1,opt,name=verified" json:"verified,omitempty"`
	Message  *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *VerifyPurchaseResponse) Reset() {
	*x = VerifyPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPurchaseResponse) ProtoMessage() {}

func (x *VerifyPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPurchaseResponse.ProtoReflect.Descriptor instead.
func (*VerifyPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{15}
}

func (x *VerifyPurchaseResponse) GetVerified() bool {
	if x != nil && x.Verified != nil {
		return *x.Verified
	}
	return false
}

func (x *VerifyPurchaseResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardType    *RewardType `protobuf:"varint,1,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType *string     `protobuf:"bytes,2,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount  *float64    `protobuf:"fixed64,3,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{16}
}

func (x *Reward) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *Reward) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *Reward) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier       *string             `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name             *string             `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	Description      *string             `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	Egg              *Egg                `protobuf:"varint,2,opt,name=egg,enum=ei.Egg" json:"egg,omitempty"`
	Goals            []*Contract_Goal    `protobuf:"bytes,3,rep,name=goals" json:"goals,omitempty"`
	GoalSets         []*Contract_GoalSet `protobuf:"bytes,16,rep,name=goal_sets,json=goalSets" json:"goal_sets,omitempty"`
	CoopAllowed      *bool               `protobuf:"varint,4,opt,name=coop_allowed,json=coopAllowed" json:"coop_allowed,omitempty"`
	MaxCoopSize      *uint32             `protobuf:"varint,5,opt,name=max_coop_size,json=maxCoopSize" json:"max_coop_size,omitempty"`
	MaxBoosts        *uint32             `protobuf:"varint,12,opt,name=max_boosts,json=maxBoosts" json:"max_boosts,omitempty"`
	MinutesPerToken  *float64            `protobuf:"fixed64,15,opt,name=minutes_per_token,json=minutesPerToken,def=60" json:"minutes_per_token,omitempty"`
	ExpirationTime   *float64            `protobuf:"fixed64,6,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	LengthSeconds    *float64            `protobuf:"fixed64,7,opt,name=length_seconds,json=lengthSeconds" json:"length_seconds,omitempty"`
	MaxSoulEggs      *float64            `protobuf:"fixed64,13,opt,name=max_soul_eggs,json=maxSoulEggs" json:"max_soul_eggs,omitempty"`
	MinClientVersion *uint32             `protobuf:"varint,14,opt,name=min_client_version,json=minClientVersion" json:"min_client_version,omitempty"`
	Debug            *bool               `protobuf:"varint,11,opt,name=debug" json:"debug,omitempty"`
}

// Default values for Contract fields.
const (
	Default_Contract_MinutesPerToken = float64(60)
)

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{17}
}

func (x *Contract) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *Contract) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Contract) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Contract) GetEgg() Egg {
	if x != nil && x.Egg != nil {
		return *x.Egg
	}
	return Egg_EDIBLE
}

func (x *Contract) GetGoals() []*Contract_Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *Contract) GetGoalSets() []*Contract_GoalSet {
	if x != nil {
		return x.GoalSets
	}
	return nil
}

func (x *Contract) GetCoopAllowed() bool {
	if x != nil && x.CoopAllowed != nil {
		return *x.CoopAllowed
	}
	return false
}

func (x *Contract) GetMaxCoopSize() uint32 {
	if x != nil && x.MaxCoopSize != nil {
		return *x.MaxCoopSize
	}
	return 0
}

func (x *Contract) GetMaxBoosts() uint32 {
	if x != nil && x.MaxBoosts != nil {
		return *x.MaxBoosts
	}
	return 0
}

func (x *Contract) GetMinutesPerToken() float64 {
	if x != nil && x.MinutesPerToken != nil {
		return *x.MinutesPerToken
	}
	return Default_Contract_MinutesPerToken
}

func (x *Contract) GetExpirationTime() float64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *Contract) GetLengthSeconds() float64 {
	if x != nil && x.LengthSeconds != nil {
		return *x.LengthSeconds
	}
	return 0
}

func (x *Contract) GetMaxSoulEggs() float64 {
	if x != nil && x.MaxSoulEggs != nil {
		return *x.MaxSoulEggs
	}
	return 0
}

func (x *Contract) GetMinClientVersion() uint32 {
	if x != nil && x.MinClientVersion != nil {
		return *x.MinClientVersion
	}
	return 0
}

func (x *Contract) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

type BasicRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EiUserId      *string `protobuf:"bytes,1,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	ClientVersion *uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Version       *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Build         *string `protobuf:"bytes,4,opt,name=build" json:"build,omitempty"`
	Platform      *string `protobuf:"bytes,5,opt,name=platform" json:"platform,omitempty"`
}

func (x *BasicRequestInfo) Reset() {
	*x = BasicRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRequestInfo) ProtoMessage() {}

func (x *BasicRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRequestInfo.ProtoReflect.Descriptor instead.
func (*BasicRequestInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{18}
}

func (x *BasicRequestInfo) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *BasicRequestInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *BasicRequestInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *BasicRequestInfo) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *BasicRequestInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

type ContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoulEggs      *float64 `protobuf:"fixed64,1,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	ClientVersion *uint32  `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *ContractsRequest) Reset() {
	*x = ContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsRequest) ProtoMessage() {}

func (x *ContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsRequest.ProtoReflect.Descriptor instead.
func (*ContractsRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{19}
}

func (x *ContractsRequest) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *ContractsRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contracts      []*Contract `protobuf:"bytes,1,rep,name=contracts" json:"contracts,omitempty"`
	WarningMessage *string     `protobuf:"bytes,4,opt,name=warning_message,json=warningMessage" json:"warning_message,omitempty"`
	ServerTime     *float64    `protobuf:"fixed64,2,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	MaxEop         *uint32     `protobuf:"varint,3,opt,name=max_eop,json=maxEop,def=1000" json:"max_eop,omitempty"`
}

// Default values for ContractsResponse fields.
const (
	Default_ContractsResponse_MaxEop = uint32(1000)
)

func (x *ContractsResponse) Reset() {
	*x = ContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsResponse) ProtoMessage() {}

func (x *ContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsResponse.ProtoReflect.Descriptor instead.
func (*ContractsResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{20}
}

func (x *ContractsResponse) GetContracts() []*Contract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *ContractsResponse) GetWarningMessage() string {
	if x != nil && x.WarningMessage != nil {
		return *x.WarningMessage
	}
	return ""
}

func (x *ContractsResponse) GetServerTime() float64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *ContractsResponse) GetMaxEop() uint32 {
	if x != nil && x.MaxEop != nil {
		return *x.MaxEop
	}
	return Default_ContractsResponse_MaxEop
}

type ContractCoopStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,5,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	UserId             *string           `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *ContractCoopStatusRequest) Reset() {
	*x = ContractCoopStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCoopStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusRequest) ProtoMessage() {}

func (x *ContractCoopStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusRequest.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{21}
}

func (x *ContractCoopStatusRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ContractCoopStatusRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractCoopStatusRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ContractCoopStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractIdentifier          *string                                        `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	TotalAmount                 *float64                                       `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	CoopIdentifier              *string                                        `protobuf:"bytes,3,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	Contributors                []*ContractCoopStatusResponse_ContributionInfo `protobuf:"bytes,4,rep,name=contributors" json:"contributors,omitempty"`
	AutoGenerated               *bool                                          `protobuf:"varint,8,opt,name=auto_generated,json=autoGenerated" json:"auto_generated,omitempty"`
	Public                      *bool                                          `protobuf:"varint,10,opt,name=public" json:"public,omitempty"`
	CreatorId                   *string                                        `protobuf:"bytes,9,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	SecondsRemaining            *float64                                       `protobuf:"fixed64,5,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	AllMembersReporting         *bool                                          `protobuf:"varint,6,opt,name=all_members_reporting,json=allMembersReporting" json:"all_members_reporting,omitempty"`
	GracePeriodSecondsRemaining *float64                                       `protobuf:"fixed64,7,opt,name=grace_period_seconds_remaining,json=gracePeriodSecondsRemaining" json:"grace_period_seconds_remaining,omitempty"`
	Gifts                       []*ContractCoopStatusResponse_CoopGift         `protobuf:"bytes,11,rep,name=gifts" json:"gifts,omitempty"`
	LocalTimestamp              *float64                                       `protobuf:"fixed64,12,opt,name=local_timestamp,json=localTimestamp" json:"local_timestamp,omitempty"`
}

func (x *ContractCoopStatusResponse) Reset() {
	*x = ContractCoopStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCoopStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse) ProtoMessage() {}

func (x *ContractCoopStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{22}
}

func (x *ContractCoopStatusResponse) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractCoopStatusResponse) GetContributors() []*ContractCoopStatusResponse_ContributionInfo {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *ContractCoopStatusResponse) GetAutoGenerated() bool {
	if x != nil && x.AutoGenerated != nil {
		return *x.AutoGenerated
	}
	return false
}

func (x *ContractCoopStatusResponse) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

func (x *ContractCoopStatusResponse) GetCreatorId() string {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return ""
}

func (x *ContractCoopStatusResponse) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetAllMembersReporting() bool {
	if x != nil && x.AllMembersReporting != nil {
		return *x.AllMembersReporting
	}
	return false
}

func (x *ContractCoopStatusResponse) GetGracePeriodSecondsRemaining() float64 {
	if x != nil && x.GracePeriodSecondsRemaining != nil {
		return *x.GracePeriodSecondsRemaining
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetGifts() []*ContractCoopStatusResponse_CoopGift {
	if x != nil {
		return x.Gifts
	}
	return nil
}

func (x *ContractCoopStatusResponse) GetLocalTimestamp() float64 {
	if x != nil && x.LocalTimestamp != nil {
		return *x.LocalTimestamp
	}
	return 0
}

type LocalContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract                     *Contract `protobuf:"bytes,1,opt,name=contract" json:"contract,omitempty"`
	CoopIdentifier               *string   `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	Accepted                     *bool     `protobuf:"varint,7,opt,name=accepted" json:"accepted,omitempty"`
	TimeAccepted                 *float64  `protobuf:"fixed64,3,opt,name=time_accepted,json=timeAccepted" json:"time_accepted,omitempty"`
	Cancelled                    *bool     `protobuf:"varint,4,opt,name=cancelled" json:"cancelled,omitempty"`
	New                          *bool     `protobuf:"varint,8,opt,name=new" json:"new,omitempty"`
	CoopSharedEndTime            *float64  `protobuf:"fixed64,5,opt,name=coop_shared_end_time,json=coopSharedEndTime" json:"coop_shared_end_time,omitempty"`
	CoopGracePeriodEndTime       *float64  `protobuf:"fixed64,9,opt,name=coop_grace_period_end_time,json=coopGracePeriodEndTime" json:"coop_grace_period_end_time,omitempty"`
	CoopContributionFinalized    *bool     `protobuf:"varint,10,opt,name=coop_contribution_finalized,json=coopContributionFinalized" json:"coop_contribution_finalized,omitempty"`
	CoopLastUploadedContribution *float64  `protobuf:"fixed64,11,opt,name=coop_last_uploaded_contribution,json=coopLastUploadedContribution" json:"coop_last_uploaded_contribution,omitempty"`
	CoopUserId                   *string   `protobuf:"bytes,13,opt,name=coop_user_id,json=coopUserId" json:"coop_user_id,omitempty"`
	LastAmountWhenRewardGiven    *float64  `protobuf:"fixed64,6,opt,name=last_amount_when_reward_given,json=lastAmountWhenRewardGiven" json:"last_amount_when_reward_given,omitempty"`
	NumGoalsAchieved             *uint32   `protobuf:"varint,14,opt,name=num_goals_achieved,json=numGoalsAchieved" json:"num_goals_achieved,omitempty"`
	BoostsUsed                   *uint32   `protobuf:"varint,12,opt,name=boosts_used,json=boostsUsed" json:"boosts_used,omitempty"`
	League                       *uint32   `protobuf:"varint,15,opt,name=league" json:"league,omitempty"`
}

func (x *LocalContract) Reset() {
	*x = LocalContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalContract) ProtoMessage() {}

func (x *LocalContract) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalContract.ProtoReflect.Descriptor instead.
func (*LocalContract) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{23}
}

func (x *LocalContract) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *LocalContract) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *LocalContract) GetAccepted() bool {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return false
}

func (x *LocalContract) GetTimeAccepted() float64 {
	if x != nil && x.TimeAccepted != nil {
		return *x.TimeAccepted
	}
	return 0
}

func (x *LocalContract) GetCancelled() bool {
	if x != nil && x.Cancelled != nil {
		return *x.Cancelled
	}
	return false
}

func (x *LocalContract) GetNew() bool {
	if x != nil && x.New != nil {
		return *x.New
	}
	return false
}

func (x *LocalContract) GetCoopSharedEndTime() float64 {
	if x != nil && x.CoopSharedEndTime != nil {
		return *x.CoopSharedEndTime
	}
	return 0
}

func (x *LocalContract) GetCoopGracePeriodEndTime() float64 {
	if x != nil && x.CoopGracePeriodEndTime != nil {
		return *x.CoopGracePeriodEndTime
	}
	return 0
}

func (x *LocalContract) GetCoopContributionFinalized() bool {
	if x != nil && x.CoopContributionFinalized != nil {
		return *x.CoopContributionFinalized
	}
	return false
}

func (x *LocalContract) GetCoopLastUploadedContribution() float64 {
	if x != nil && x.CoopLastUploadedContribution != nil {
		return *x.CoopLastUploadedContribution
	}
	return 0
}

func (x *LocalContract) GetCoopUserId() string {
	if x != nil && x.CoopUserId != nil {
		return *x.CoopUserId
	}
	return ""
}

func (x *LocalContract) GetLastAmountWhenRewardGiven() float64 {
	if x != nil && x.LastAmountWhenRewardGiven != nil {
		return *x.LastAmountWhenRewardGiven
	}
	return 0
}

func (x *LocalContract) GetNumGoalsAchieved() uint32 {
	if x != nil && x.NumGoalsAchieved != nil {
		return *x.NumGoalsAchieved
	}
	return 0
}

func (x *LocalContract) GetBoostsUsed() uint32 {
	if x != nil && x.BoostsUsed != nil {
		return *x.BoostsUsed
	}
	return 0
}

func (x *LocalContract) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

type MyContracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractIdsSeen     []string                      `protobuf:"bytes,3,rep,name=contract_ids_seen,json=contractIdsSeen" json:"contract_ids_seen,omitempty"`
	Contracts           []*LocalContract              `protobuf:"bytes,1,rep,name=contracts" json:"contracts,omitempty"`
	Archive             []*LocalContract              `protobuf:"bytes,2,rep,name=archive" json:"archive,omitempty"`
	CurrentCoopStatuses []*ContractCoopStatusResponse `protobuf:"bytes,4,rep,name=current_coop_statuses,json=currentCoopStatuses" json:"current_coop_statuses,omitempty"`
}

func (x *MyContracts) Reset() {
	*x = MyContracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyContracts) ProtoMessage() {}

func (x *MyContracts) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyContracts.ProtoReflect.Descriptor instead.
func (*MyContracts) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{24}
}

func (x *MyContracts) GetContractIdsSeen() []string {
	if x != nil {
		return x.ContractIdsSeen
	}
	return nil
}

func (x *MyContracts) GetContracts() []*LocalContract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *MyContracts) GetArchive() []*LocalContract {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *MyContracts) GetCurrentCoopStatuses() []*ContractCoopStatusResponse {
	if x != nil {
		return x.CurrentCoopStatuses
	}
	return nil
}

type QueryCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,5,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	League             *uint32           `protobuf:"varint,4,opt,name=league" json:"league,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *QueryCoopRequest) Reset() {
	*x = QueryCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCoopRequest) ProtoMessage() {}

func (x *QueryCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCoopRequest.ProtoReflect.Descriptor instead.
func (*QueryCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{25}
}

func (x *QueryCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *QueryCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *QueryCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *QueryCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *QueryCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type QueryCoopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists          *bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Full            *bool `protobuf:"varint,2,opt,name=full" json:"full,omitempty"`
	DifferentLeague *bool `protobuf:"varint,4,opt,name=different_league,json=differentLeague" json:"different_league,omitempty"`
	Banned          *bool `protobuf:"varint,3,opt,name=banned" json:"banned,omitempty"`
}

func (x *QueryCoopResponse) Reset() {
	*x = QueryCoopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCoopResponse) ProtoMessage() {}

func (x *QueryCoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCoopResponse.ProtoReflect.Descriptor instead.
func (*QueryCoopResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{26}
}

func (x *QueryCoopResponse) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

func (x *QueryCoopResponse) GetFull() bool {
	if x != nil && x.Full != nil {
		return *x.Full
	}
	return false
}

func (x *QueryCoopResponse) GetDifferentLeague() bool {
	if x != nil && x.DifferentLeague != nil {
		return *x.DifferentLeague
	}
	return false
}

func (x *QueryCoopResponse) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

type CreateCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,10,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	SecondsRemaining   *float64          `protobuf:"fixed64,3,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	UserId             *string           `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string           `protobuf:"bytes,5,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SoulPower          *float64          `protobuf:"fixed64,8,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	League             *uint32           `protobuf:"varint,9,opt,name=league" json:"league,omitempty"`
	Platform           *aux.Platform     `protobuf:"varint,6,opt,name=platform,enum=aux.Platform" json:"platform,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *CreateCoopRequest) Reset() {
	*x = CreateCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoopRequest) ProtoMessage() {}

func (x *CreateCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoopRequest.ProtoReflect.Descriptor instead.
func (*CreateCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{27}
}

func (x *CreateCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CreateCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *CreateCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *CreateCoopRequest) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *CreateCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CreateCoopRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *CreateCoopRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *CreateCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *CreateCoopRequest) GetPlatform() aux.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return aux.Platform_IOS
}

func (x *CreateCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CreateCoopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *CreateCoopResponse) Reset() {
	*x = CreateCoopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoopResponse) ProtoMessage() {}

func (x *CreateCoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoopResponse.ProtoReflect.Descriptor instead.
func (*CreateCoopResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{28}
}

func (x *CreateCoopResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CreateCoopResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type JoinCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,10,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	UserId             *string           `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string           `protobuf:"bytes,4,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SoulPower          *float64          `protobuf:"fixed64,8,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	League             *uint32           `protobuf:"varint,9,opt,name=league" json:"league,omitempty"`
	Platform           *aux.Platform     `protobuf:"varint,5,opt,name=platform,enum=aux.Platform" json:"platform,omitempty"`
	SecondsRemaining   *float64          `protobuf:"fixed64,11,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *JoinCoopRequest) Reset() {
	*x = JoinCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCoopRequest) ProtoMessage() {}

func (x *JoinCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCoopRequest.ProtoReflect.Descriptor instead.
func (*JoinCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{29}
}

func (x *JoinCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *JoinCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *JoinCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *JoinCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *JoinCoopRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *JoinCoopRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *JoinCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *JoinCoopRequest) GetPlatform() aux.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return aux.Platform_IOS
}

func (x *JoinCoopRequest) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *JoinCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type JoinCoopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          *bool    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message          *string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Banned           *bool    `protobuf:"varint,4,opt,name=banned" json:"banned,omitempty"`
	CoopIdentifier   *string  `protobuf:"bytes,5,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	SecondsRemaining *float64 `protobuf:"fixed64,3,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
}

func (x *JoinCoopResponse) Reset() {
	*x = JoinCoopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinCoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCoopResponse) ProtoMessage() {}

func (x *JoinCoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCoopResponse.ProtoReflect.Descriptor instead.
func (*JoinCoopResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{30}
}

func (x *JoinCoopResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *JoinCoopResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *JoinCoopResponse) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *JoinCoopResponse) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *JoinCoopResponse) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

type AutoJoinCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,9,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	UserId             *string           `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string           `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SoulPower          *float64          `protobuf:"fixed64,4,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	League             *uint32           `protobuf:"varint,8,opt,name=league" json:"league,omitempty"`
	SecondsRemaining   *float64          `protobuf:"fixed64,5,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Platform           *aux.Platform     `protobuf:"varint,6,opt,name=platform,enum=aux.Platform" json:"platform,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *AutoJoinCoopRequest) Reset() {
	*x = AutoJoinCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoJoinCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoJoinCoopRequest) ProtoMessage() {}

func (x *AutoJoinCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoJoinCoopRequest.ProtoReflect.Descriptor instead.
func (*AutoJoinCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{31}
}

func (x *AutoJoinCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *AutoJoinCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *AutoJoinCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AutoJoinCoopRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AutoJoinCoopRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetPlatform() aux.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return aux.Platform_IOS
}

func (x *AutoJoinCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type UpdateCoopPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,6,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	RequestingUserId   *string           `protobuf:"bytes,3,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	Public             *bool             `protobuf:"varint,4,opt,name=public" json:"public,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *UpdateCoopPermissionsRequest) Reset() {
	*x = UpdateCoopPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoopPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoopPermissionsRequest) ProtoMessage() {}

func (x *UpdateCoopPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoopPermissionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoopPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateCoopPermissionsRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *UpdateCoopPermissionsRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *UpdateCoopPermissionsRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *UpdateCoopPermissionsRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *UpdateCoopPermissionsRequest) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

func (x *UpdateCoopPermissionsRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type UpdateCoopPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *UpdateCoopPermissionsResponse) Reset() {
	*x = UpdateCoopPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoopPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoopPermissionsResponse) ProtoMessage() {}

func (x *UpdateCoopPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoopPermissionsResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoopPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateCoopPermissionsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *UpdateCoopPermissionsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type LeaveCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string           `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *LeaveCoopRequest) Reset() {
	*x = LeaveCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveCoopRequest) ProtoMessage() {}

func (x *LeaveCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveCoopRequest.ProtoReflect.Descriptor instead.
func (*LeaveCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{34}
}

func (x *LeaveCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *LeaveCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *LeaveCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *LeaveCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *LeaveCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type GiftPlayerCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string           `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	RequestingUserId   *string           `protobuf:"bytes,4,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	RequestingUserName *string           `protobuf:"bytes,6,opt,name=requesting_user_name,json=requestingUserName" json:"requesting_user_name,omitempty"`
	Amount             *uint32           `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *GiftPlayerCoopRequest) Reset() {
	*x = GiftPlayerCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftPlayerCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftPlayerCoopRequest) ProtoMessage() {}

func (x *GiftPlayerCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftPlayerCoopRequest.ProtoReflect.Descriptor instead.
func (*GiftPlayerCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{35}
}

func (x *GiftPlayerCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *GiftPlayerCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetRequestingUserName() string {
	if x != nil && x.RequestingUserName != nil {
		return *x.RequestingUserName
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *GiftPlayerCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type KickPlayerCoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string           `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	RequestingUserId   *string           `protobuf:"bytes,4,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	ClientVersion      *uint32           `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *KickPlayerCoopRequest) Reset() {
	*x = KickPlayerCoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickPlayerCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerCoopRequest) ProtoMessage() {}

func (x *KickPlayerCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerCoopRequest.ProtoReflect.Descriptor instead.
func (*KickPlayerCoopRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{36}
}

func (x *KickPlayerCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *KickPlayerCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ContractCoopStatusUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo              *BasicRequestInfo `protobuf:"bytes,12,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId             *string           `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContractIdentifier *string           `protobuf:"bytes,2,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string           `protobuf:"bytes,3,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PushUserId         *string           `protobuf:"bytes,8,opt,name=push_user_id,json=pushUserId" json:"push_user_id,omitempty"`
	Amount             *float64          `protobuf:"fixed64,4,opt,name=amount" json:"amount,omitempty"`
	Rate               *float64          `protobuf:"fixed64,5,opt,name=rate" json:"rate,omitempty"`
	TimeCheatsDetected *uint32           `protobuf:"varint,6,opt,name=time_cheats_detected,json=timeCheatsDetected" json:"time_cheats_detected,omitempty"`
	SoulPower          *float64          `protobuf:"fixed64,7,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	BoostTokens        *uint32           `protobuf:"varint,9,opt,name=boost_tokens,json=boostTokens" json:"boost_tokens,omitempty"`
	EggLayingRateBuff  *float64          `protobuf:"fixed64,10,opt,name=egg_laying_rate_buff,json=eggLayingRateBuff,def=1" json:"egg_laying_rate_buff,omitempty"`
	EarningsBuff       *float64          `protobuf:"fixed64,11,opt,name=earnings_buff,json=earningsBuff,def=1" json:"earnings_buff,omitempty"`
}

// Default values for ContractCoopStatusUpdateRequest fields.
const (
	Default_ContractCoopStatusUpdateRequest_EggLayingRateBuff = float64(1)
	Default_ContractCoopStatusUpdateRequest_EarningsBuff      = float64(1)
)

func (x *ContractCoopStatusUpdateRequest) Reset() {
	*x = ContractCoopStatusUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCoopStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusUpdateRequest) ProtoMessage() {}

func (x *ContractCoopStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{37}
}

func (x *ContractCoopStatusUpdateRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ContractCoopStatusUpdateRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetPushUserId() string {
	if x != nil && x.PushUserId != nil {
		return *x.PushUserId
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetRate() float64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetTimeCheatsDetected() uint32 {
	if x != nil && x.TimeCheatsDetected != nil {
		return *x.TimeCheatsDetected
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetBoostTokens() uint32 {
	if x != nil && x.BoostTokens != nil {
		return *x.BoostTokens
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetEggLayingRateBuff() float64 {
	if x != nil && x.EggLayingRateBuff != nil {
		return *x.EggLayingRateBuff
	}
	return Default_ContractCoopStatusUpdateRequest_EggLayingRateBuff
}

func (x *ContractCoopStatusUpdateRequest) GetEarningsBuff() float64 {
	if x != nil && x.EarningsBuff != nil {
		return *x.EarningsBuff
	}
	return Default_ContractCoopStatusUpdateRequest_EarningsBuff
}

type ContractCoopStatusUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Finalized *bool `protobuf:"varint,1,opt,name=finalized" json:"finalized,omitempty"`
}

func (x *ContractCoopStatusUpdateResponse) Reset() {
	*x = ContractCoopStatusUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCoopStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusUpdateResponse) ProtoMessage() {}

func (x *ContractCoopStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{38}
}

func (x *ContractCoopStatusUpdateResponse) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

type CoopBuffState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EggLayingRate   *float64 `protobuf:"fixed64,1,opt,name=egg_laying_rate,json=eggLayingRate,def=1" json:"egg_laying_rate,omitempty"`
	Earnings        *float64 `protobuf:"fixed64,2,opt,name=earnings,def=1" json:"earnings,omitempty"`
	ServerTimestamp *float64 `protobuf:"fixed64,3,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
}

// Default values for CoopBuffState fields.
const (
	Default_CoopBuffState_EggLayingRate = float64(1)
	Default_CoopBuffState_Earnings      = float64(1)
)

func (x *CoopBuffState) Reset() {
	*x = CoopBuffState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopBuffState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopBuffState) ProtoMessage() {}

func (x *CoopBuffState) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopBuffState.ProtoReflect.Descriptor instead.
func (*CoopBuffState) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{39}
}

func (x *CoopBuffState) GetEggLayingRate() float64 {
	if x != nil && x.EggLayingRate != nil {
		return *x.EggLayingRate
	}
	return Default_CoopBuffState_EggLayingRate
}

func (x *CoopBuffState) GetEarnings() float64 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return Default_CoopBuffState_Earnings
}

func (x *CoopBuffState) GetServerTimestamp() float64 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

type CoopBuffHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*CoopBuffState `protobuf:"bytes,1,rep,name=history" json:"history,omitempty"`
}

func (x *CoopBuffHistory) Reset() {
	*x = CoopBuffHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoopBuffHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopBuffHistory) ProtoMessage() {}

func (x *CoopBuffHistory) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopBuffHistory.ProtoReflect.Descriptor instead.
func (*CoopBuffHistory) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{40}
}

func (x *CoopBuffHistory) GetHistory() []*CoopBuffState {
	if x != nil {
		return x.History
	}
	return nil
}

type UserDataInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo          *BasicRequestInfo `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId         *string           `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId       *string           `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	BackupChecksum *uint64           `protobuf:"varint,3,opt,name=backup_checksum,json=backupChecksum" json:"backup_checksum,omitempty"`
}

func (x *UserDataInfoRequest) Reset() {
	*x = UserDataInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataInfoRequest) ProtoMessage() {}

func (x *UserDataInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataInfoRequest.ProtoReflect.Descriptor instead.
func (*UserDataInfoRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{41}
}

func (x *UserDataInfoRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *UserDataInfoRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserDataInfoRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *UserDataInfoRequest) GetBackupChecksum() uint64 {
	if x != nil && x.BackupChecksum != nil {
		return *x.BackupChecksum
	}
	return 0
}

type UserDataInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupChecksum  *uint64  `protobuf:"varint,1,opt,name=backup_checksum,json=backupChecksum" json:"backup_checksum,omitempty"`
	BackupTotalCash *float64 `protobuf:"fixed64,2,opt,name=backup_total_cash,json=backupTotalCash" json:"backup_total_cash,omitempty"`
	CoopMemberships []string `protobuf:"bytes,3,rep,name=coop_memberships,json=coopMemberships" json:"coop_memberships,omitempty"`
}

func (x *UserDataInfoResponse) Reset() {
	*x = UserDataInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataInfoResponse) ProtoMessage() {}

func (x *UserDataInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataInfoResponse.ProtoReflect.Descriptor instead.
func (*UserDataInfoResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{42}
}

func (x *UserDataInfoResponse) GetBackupChecksum() uint64 {
	if x != nil && x.BackupChecksum != nil {
		return *x.BackupChecksum
	}
	return 0
}

func (x *UserDataInfoResponse) GetBackupTotalCash() float64 {
	if x != nil && x.BackupTotalCash != nil {
		return *x.BackupTotalCash
	}
	return 0
}

func (x *UserDataInfoResponse) GetCoopMemberships() []string {
	if x != nil {
		return x.CoopMemberships
	}
	return nil
}

type ClearAllUserDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo          *BasicRequestInfo `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId         *string           `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId       *string           `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	BackupChecksum *uint64           `protobuf:"varint,3,opt,name=backup_checksum,json=backupChecksum" json:"backup_checksum,omitempty"`
}

func (x *ClearAllUserDataRequest) Reset() {
	*x = ClearAllUserDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearAllUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllUserDataRequest) ProtoMessage() {}

func (x *ClearAllUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllUserDataRequest.ProtoReflect.Descriptor instead.
func (*ClearAllUserDataRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{43}
}

func (x *ClearAllUserDataRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ClearAllUserDataRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ClearAllUserDataRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *ClearAllUserDataRequest) GetBackupChecksum() uint64 {
	if x != nil && x.BackupChecksum != nil {
		return *x.BackupChecksum
	}
	return 0
}

type ServerGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        *string     `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RewardType    *RewardType `protobuf:"varint,3,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType *string     `protobuf:"bytes,4,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount  *float64    `protobuf:"fixed64,5,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
}

func (x *ServerGift) Reset() {
	*x = ServerGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGift) ProtoMessage() {}

func (x *ServerGift) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGift.ProtoReflect.Descriptor instead.
func (*ServerGift) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{44}
}

func (x *ServerGift) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ServerGift) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *ServerGift) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *ServerGift) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

type PeriodicalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sales     *SalesInfo           `protobuf:"bytes,1,opt,name=sales" json:"sales,omitempty"`
	Events    *EggIncCurrentEvents `protobuf:"bytes,2,opt,name=events" json:"events,omitempty"`
	Contracts *ContractsResponse   `protobuf:"bytes,3,opt,name=contracts" json:"contracts,omitempty"`
	Gifts     []*ServerGift        `protobuf:"bytes,4,rep,name=gifts" json:"gifts,omitempty"`
}

func (x *PeriodicalsResponse) Reset() {
	*x = PeriodicalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicalsResponse) ProtoMessage() {}

func (x *PeriodicalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicalsResponse.ProtoReflect.Descriptor instead.
func (*PeriodicalsResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{45}
}

func (x *PeriodicalsResponse) GetSales() *SalesInfo {
	if x != nil {
		return x.Sales
	}
	return nil
}

func (x *PeriodicalsResponse) GetEvents() *EggIncCurrentEvents {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PeriodicalsResponse) GetContracts() *ContractsResponse {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *PeriodicalsResponse) GetGifts() []*ServerGift {
	if x != nil {
		return x.Gifts
	}
	return nil
}

type GetPeriodicalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo                *BasicRequestInfo `protobuf:"bytes,12,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId               *string           `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PiggyFull            *bool             `protobuf:"varint,2,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull       *bool             `protobuf:"varint,3,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	SecondsFullRealtime  *float64          `protobuf:"fixed64,4,opt,name=seconds_full_realtime,json=secondsFullRealtime" json:"seconds_full_realtime,omitempty"`
	SecondsFullGametime  *float64          `protobuf:"fixed64,5,opt,name=seconds_full_gametime,json=secondsFullGametime" json:"seconds_full_gametime,omitempty"`
	LostIncrements       *uint32           `protobuf:"varint,7,opt,name=lost_increments,json=lostIncrements" json:"lost_increments,omitempty"`
	SoulEggs             *float64          `protobuf:"fixed64,8,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	CurrentClientVersion *uint32           `protobuf:"varint,10,opt,name=current_client_version,json=currentClientVersion" json:"current_client_version,omitempty"`
	Debug                *bool             `protobuf:"varint,11,opt,name=debug" json:"debug,omitempty"`
}

func (x *GetPeriodicalsRequest) Reset() {
	*x = GetPeriodicalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeriodicalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeriodicalsRequest) ProtoMessage() {}

func (x *GetPeriodicalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeriodicalsRequest.ProtoReflect.Descriptor instead.
func (*GetPeriodicalsRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{46}
}

func (x *GetPeriodicalsRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *GetPeriodicalsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetPeriodicalsRequest) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *GetPeriodicalsRequest) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *GetPeriodicalsRequest) GetSecondsFullRealtime() float64 {
	if x != nil && x.SecondsFullRealtime != nil {
		return *x.SecondsFullRealtime
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetSecondsFullGametime() float64 {
	if x != nil && x.SecondsFullGametime != nil {
		return *x.SecondsFullGametime
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetLostIncrements() uint32 {
	if x != nil && x.LostIncrements != nil {
		return *x.LostIncrements
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetCurrentClientVersion() uint32 {
	if x != nil && x.CurrentClientVersion != nil {
		return *x.CurrentClientVersion
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

type AdAttributionRawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceAdId *string `protobuf:"bytes,1,opt,name=device_ad_id,json=deviceAdId" json:"device_ad_id,omitempty"`
	UserId     *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AdNetwork  *string `protobuf:"bytes,2,opt,name=ad_network,json=adNetwork" json:"ad_network,omitempty"`
	JsonData   *string `protobuf:"bytes,3,opt,name=json_data,json=jsonData" json:"json_data,omitempty"`
}

func (x *AdAttributionRawData) Reset() {
	*x = AdAttributionRawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdAttributionRawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAttributionRawData) ProtoMessage() {}

func (x *AdAttributionRawData) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAttributionRawData.ProtoReflect.Descriptor instead.
func (*AdAttributionRawData) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{47}
}

func (x *AdAttributionRawData) GetDeviceAdId() string {
	if x != nil && x.DeviceAdId != nil {
		return *x.DeviceAdId
	}
	return ""
}

func (x *AdAttributionRawData) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AdAttributionRawData) GetAdNetwork() string {
	if x != nil && x.AdNetwork != nil {
		return *x.AdNetwork
	}
	return ""
}

func (x *AdAttributionRawData) GetJsonData() string {
	if x != nil && x.JsonData != nil {
		return *x.JsonData
	}
	return ""
}

type AdAttributionRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       *string  `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AdId         *string  `protobuf:"bytes,2,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
	AdNetwork    *string  `protobuf:"bytes,3,opt,name=ad_network,json=adNetwork" json:"ad_network,omitempty"`
	Campaign     *string  `protobuf:"bytes,4,opt,name=campaign" json:"campaign,omitempty"`
	Keyword      *string  `protobuf:"bytes,5,opt,name=keyword" json:"keyword,omitempty"`
	Extra        *string  `protobuf:"bytes,6,opt,name=extra" json:"extra,omitempty"`
	ClickDate    *float32 `protobuf:"fixed32,7,opt,name=click_date,json=clickDate" json:"click_date,omitempty"`
	DownloadDate *float32 `protobuf:"fixed32,8,opt,name=download_date,json=downloadDate" json:"download_date,omitempty"`
	ApproxTime   *float32 `protobuf:"fixed32,9,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
}

func (x *AdAttributionRow) Reset() {
	*x = AdAttributionRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdAttributionRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAttributionRow) ProtoMessage() {}

func (x *AdAttributionRow) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAttributionRow.ProtoReflect.Descriptor instead.
func (*AdAttributionRow) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{48}
}

func (x *AdAttributionRow) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AdAttributionRow) GetAdId() string {
	if x != nil && x.AdId != nil {
		return *x.AdId
	}
	return ""
}

func (x *AdAttributionRow) GetAdNetwork() string {
	if x != nil && x.AdNetwork != nil {
		return *x.AdNetwork
	}
	return ""
}

func (x *AdAttributionRow) GetCampaign() string {
	if x != nil && x.Campaign != nil {
		return *x.Campaign
	}
	return ""
}

func (x *AdAttributionRow) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *AdAttributionRow) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

func (x *AdAttributionRow) GetClickDate() float32 {
	if x != nil && x.ClickDate != nil {
		return *x.ClickDate
	}
	return 0
}

func (x *AdAttributionRow) GetDownloadDate() float32 {
	if x != nil && x.DownloadDate != nil {
		return *x.DownloadDate
	}
	return 0
}

func (x *AdAttributionRow) GetApproxTime() float32 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

type AdAttributionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceAdId      *string `protobuf:"bytes,1,opt,name=device_ad_id,json=deviceAdId" json:"device_ad_id,omitempty"`
	NetworkName     *string `protobuf:"bytes,2,opt,name=network_name,json=networkName" json:"network_name,omitempty"`
	Attribution     *bool   `protobuf:"varint,3,opt,name=attribution" json:"attribution,omitempty"`
	OrgName         *string `protobuf:"bytes,4,opt,name=org_name,json=orgName" json:"org_name,omitempty"`
	OrgId           *string `protobuf:"bytes,5,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	CampaignName    *string `protobuf:"bytes,6,opt,name=campaign_name,json=campaignName" json:"campaign_name,omitempty"`
	CampaignId      *string `protobuf:"bytes,7,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	ClickDate       *string `protobuf:"bytes,8,opt,name=click_date,json=clickDate" json:"click_date,omitempty"`
	ConversionDate  *string `protobuf:"bytes,9,opt,name=conversion_date,json=conversionDate" json:"conversion_date,omitempty"`
	ConversionType  *string `protobuf:"bytes,10,opt,name=conversion_type,json=conversionType" json:"conversion_type,omitempty"`
	Geo             *string `protobuf:"bytes,11,opt,name=geo" json:"geo,omitempty"`
	AdgroupName     *string `protobuf:"bytes,12,opt,name=adgroup_name,json=adgroupName" json:"adgroup_name,omitempty"`
	AdgroupId       *string `protobuf:"bytes,13,opt,name=adgroup_id,json=adgroupId" json:"adgroup_id,omitempty"`
	Keyword         *string `protobuf:"bytes,14,opt,name=keyword" json:"keyword,omitempty"`
	KeywordId       *string `protobuf:"bytes,15,opt,name=keyword_id,json=keywordId" json:"keyword_id,omitempty"`
	KeywordExtra    *string `protobuf:"bytes,16,opt,name=keyword_extra,json=keywordExtra" json:"keyword_extra,omitempty"`
	CreativesetName *string `protobuf:"bytes,17,opt,name=creativeset_name,json=creativesetName" json:"creativeset_name,omitempty"`
	CreativesetId   *string `protobuf:"bytes,18,opt,name=creativeset_id,json=creativesetId" json:"creativeset_id,omitempty"`
}

func (x *AdAttributionInfo) Reset() {
	*x = AdAttributionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdAttributionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAttributionInfo) ProtoMessage() {}

func (x *AdAttributionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAttributionInfo.ProtoReflect.Descriptor instead.
func (*AdAttributionInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{49}
}

func (x *AdAttributionInfo) GetDeviceAdId() string {
	if x != nil && x.DeviceAdId != nil {
		return *x.DeviceAdId
	}
	return ""
}

func (x *AdAttributionInfo) GetNetworkName() string {
	if x != nil && x.NetworkName != nil {
		return *x.NetworkName
	}
	return ""
}

func (x *AdAttributionInfo) GetAttribution() bool {
	if x != nil && x.Attribution != nil {
		return *x.Attribution
	}
	return false
}

func (x *AdAttributionInfo) GetOrgName() string {
	if x != nil && x.OrgName != nil {
		return *x.OrgName
	}
	return ""
}

func (x *AdAttributionInfo) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

func (x *AdAttributionInfo) GetCampaignName() string {
	if x != nil && x.CampaignName != nil {
		return *x.CampaignName
	}
	return ""
}

func (x *AdAttributionInfo) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *AdAttributionInfo) GetClickDate() string {
	if x != nil && x.ClickDate != nil {
		return *x.ClickDate
	}
	return ""
}

func (x *AdAttributionInfo) GetConversionDate() string {
	if x != nil && x.ConversionDate != nil {
		return *x.ConversionDate
	}
	return ""
}

func (x *AdAttributionInfo) GetConversionType() string {
	if x != nil && x.ConversionType != nil {
		return *x.ConversionType
	}
	return ""
}

func (x *AdAttributionInfo) GetGeo() string {
	if x != nil && x.Geo != nil {
		return *x.Geo
	}
	return ""
}

func (x *AdAttributionInfo) GetAdgroupName() string {
	if x != nil && x.AdgroupName != nil {
		return *x.AdgroupName
	}
	return ""
}

func (x *AdAttributionInfo) GetAdgroupId() string {
	if x != nil && x.AdgroupId != nil {
		return *x.AdgroupId
	}
	return ""
}

func (x *AdAttributionInfo) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *AdAttributionInfo) GetKeywordId() string {
	if x != nil && x.KeywordId != nil {
		return *x.KeywordId
	}
	return ""
}

func (x *AdAttributionInfo) GetKeywordExtra() string {
	if x != nil && x.KeywordExtra != nil {
		return *x.KeywordExtra
	}
	return ""
}

func (x *AdAttributionInfo) GetCreativesetName() string {
	if x != nil && x.CreativesetName != nil {
		return *x.CreativesetName
	}
	return ""
}

func (x *AdAttributionInfo) GetCreativesetId() string {
	if x != nil && x.CreativesetId != nil {
		return *x.CreativesetId
	}
	return ""
}

type MissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ship             *MissionInfo_Spaceship    `protobuf:"varint,1,opt,name=ship,enum=ei.MissionInfo_Spaceship" json:"ship,omitempty"`
	Status           *MissionInfo_Status       `protobuf:"varint,2,opt,name=status,enum=ei.MissionInfo_Status" json:"status,omitempty"`
	DurationType     *MissionInfo_DurationType `protobuf:"varint,3,opt,name=duration_type,json=durationType,enum=ei.MissionInfo_DurationType" json:"duration_type,omitempty"`
	Fuel             []*MissionInfo_Fuel       `protobuf:"bytes,4,rep,name=fuel" json:"fuel,omitempty"`
	DurationSeconds  *float64                  `protobuf:"fixed64,5,opt,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
	Capacity         *uint32                   `protobuf:"varint,9,opt,name=capacity" json:"capacity,omitempty"`
	SecondsRemaining *float64                  `protobuf:"fixed64,6,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	StartTimeDerived *float64                  `protobuf:"fixed64,8,opt,name=start_time_derived,json=startTimeDerived" json:"start_time_derived,omitempty"`
	MissionLog       *string                   `protobuf:"bytes,10,opt,name=mission_log,json=missionLog" json:"mission_log,omitempty"`
	Identifier       *string                   `protobuf:"bytes,7,opt,name=identifier" json:"identifier,omitempty"`
}

func (x *MissionInfo) Reset() {
	*x = MissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo) ProtoMessage() {}

func (x *MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo.ProtoReflect.Descriptor instead.
func (*MissionInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{50}
}

func (x *MissionInfo) GetShip() MissionInfo_Spaceship {
	if x != nil && x.Ship != nil {
		return *x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *MissionInfo) GetStatus() MissionInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return MissionInfo_FUELING
}

func (x *MissionInfo) GetDurationType() MissionInfo_DurationType {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return MissionInfo_SHORT
}

func (x *MissionInfo) GetFuel() []*MissionInfo_Fuel {
	if x != nil {
		return x.Fuel
	}
	return nil
}

func (x *MissionInfo) GetDurationSeconds() float64 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *MissionInfo) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *MissionInfo) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *MissionInfo) GetStartTimeDerived() float64 {
	if x != nil && x.StartTimeDerived != nil {
		return *x.StartTimeDerived
	}
	return 0
}

func (x *MissionInfo) GetMissionLog() string {
	if x != nil && x.MissionLog != nil {
		return *x.MissionLog
	}
	return ""
}

func (x *MissionInfo) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

type ArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *ArtifactSpec_Name   `protobuf:"varint,1,opt,name=name,enum=ei.ArtifactSpec_Name" json:"name,omitempty"`
	Level  *ArtifactSpec_Level  `protobuf:"varint,2,opt,name=level,enum=ei.ArtifactSpec_Level" json:"level,omitempty"`
	Rarity *ArtifactSpec_Rarity `protobuf:"varint,3,opt,name=rarity,enum=ei.ArtifactSpec_Rarity" json:"rarity,omitempty"`
	Egg    *Egg                 `protobuf:"varint,4,opt,name=egg,enum=ei.Egg" json:"egg,omitempty"`
}

func (x *ArtifactSpec) Reset() {
	*x = ArtifactSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSpec) ProtoMessage() {}

func (x *ArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSpec.ProtoReflect.Descriptor instead.
func (*ArtifactSpec) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{51}
}

func (x *ArtifactSpec) GetName() ArtifactSpec_Name {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ArtifactSpec_LUNAR_TOTEM
}

func (x *ArtifactSpec) GetLevel() ArtifactSpec_Level {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ArtifactSpec_INFERIOR
}

func (x *ArtifactSpec) GetRarity() ArtifactSpec_Rarity {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return ArtifactSpec_COMMON
}

func (x *ArtifactSpec) GetEgg() Egg {
	if x != nil && x.Egg != nil {
		return *x.Egg
	}
	return Egg_EDIBLE
}

type CompleteArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *ArtifactSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Stones []*ArtifactSpec `protobuf:"bytes,2,rep,name=stones" json:"stones,omitempty"`
}

func (x *CompleteArtifact) Reset() {
	*x = CompleteArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteArtifact) ProtoMessage() {}

func (x *CompleteArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteArtifact.ProtoReflect.Descriptor instead.
func (*CompleteArtifact) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{52}
}

func (x *CompleteArtifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CompleteArtifact) GetStones() []*ArtifactSpec {
	if x != nil {
		return x.Stones
	}
	return nil
}

type ArtifactInventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   *uint64           `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Artifact *CompleteArtifact `protobuf:"bytes,2,opt,name=artifact" json:"artifact,omitempty"`
	Quantity *float64          `protobuf:"fixed64,3,opt,name=quantity" json:"quantity,omitempty"`
	ServerId *string           `protobuf:"bytes,4,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
}

func (x *ArtifactInventoryItem) Reset() {
	*x = ArtifactInventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInventoryItem) ProtoMessage() {}

func (x *ArtifactInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactInventoryItem.ProtoReflect.Descriptor instead.
func (*ArtifactInventoryItem) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{53}
}

func (x *ArtifactInventoryItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *ArtifactInventoryItem) GetArtifact() *CompleteArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *ArtifactInventoryItem) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *ArtifactInventoryItem) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

type InventorySlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occupied *bool   `protobuf:"varint,1,opt,name=occupied" json:"occupied,omitempty"`
	ItemId   *uint32 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *InventorySlot) Reset() {
	*x = InventorySlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventorySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventorySlot) ProtoMessage() {}

func (x *InventorySlot) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventorySlot.ProtoReflect.Descriptor instead.
func (*InventorySlot) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{54}
}

func (x *InventorySlot) GetOccupied() bool {
	if x != nil && x.Occupied != nil {
		return *x.Occupied
	}
	return false
}

func (x *InventorySlot) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type ArtifactsConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo         *BasicRequestInfo `protobuf:"bytes,2,opt,name=rinfo" json:"rinfo,omitempty"`
	ClientVersion *uint32           `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
}

func (x *ArtifactsConfigurationRequest) Reset() {
	*x = ArtifactsConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationRequest) ProtoMessage() {}

func (x *ArtifactsConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{55}
}

func (x *ArtifactsConfigurationRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ArtifactsConfigurationRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ArtifactsConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionParameters  []*ArtifactsConfigurationResponse_MissionParameters  `protobuf:"bytes,1,rep,name=mission_parameters,json=missionParameters" json:"mission_parameters,omitempty"`
	ArtifactParameters []*ArtifactsConfigurationResponse_ArtifactParameters `protobuf:"bytes,2,rep,name=artifact_parameters,json=artifactParameters" json:"artifact_parameters,omitempty"`
}

func (x *ArtifactsConfigurationResponse) Reset() {
	*x = ArtifactsConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{56}
}

func (x *ArtifactsConfigurationResponse) GetMissionParameters() []*ArtifactsConfigurationResponse_MissionParameters {
	if x != nil {
		return x.MissionParameters
	}
	return nil
}

func (x *ArtifactsConfigurationResponse) GetArtifactParameters() []*ArtifactsConfigurationResponse_ArtifactParameters {
	if x != nil {
		return x.ArtifactParameters
	}
	return nil
}

type MissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo         *BasicRequestInfo `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	ClientVersion *uint32           `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	EiUserId      *string           `protobuf:"bytes,3,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	Info          *MissionInfo      `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *MissionRequest) Reset() {
	*x = MissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionRequest) ProtoMessage() {}

func (x *MissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionRequest.ProtoReflect.Descriptor instead.
func (*MissionRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{57}
}

func (x *MissionRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *MissionRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *MissionRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *MissionRequest) GetInfo() *MissionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type MissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool        `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Info    *MissionInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (x *MissionResponse) Reset() {
	*x = MissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionResponse) ProtoMessage() {}

func (x *MissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionResponse.ProtoReflect.Descriptor instead.
func (*MissionResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{58}
}

func (x *MissionResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *MissionResponse) GetInfo() *MissionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CompleteMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      *bool                                         `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Info         *MissionInfo                                  `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Artifacts    []*CompleteMissionResponse_SecureArtifactSpec `protobuf:"bytes,3,rep,name=artifacts" json:"artifacts,omitempty"`
	OtherRewards []*Reward                                     `protobuf:"bytes,4,rep,name=other_rewards,json=otherRewards" json:"other_rewards,omitempty"`
	EiUserId     *string                                       `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
}

func (x *CompleteMissionResponse) Reset() {
	*x = CompleteMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMissionResponse) ProtoMessage() {}

func (x *CompleteMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMissionResponse.ProtoReflect.Descriptor instead.
func (*CompleteMissionResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{59}
}

func (x *CompleteMissionResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CompleteMissionResponse) GetInfo() *MissionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CompleteMissionResponse) GetArtifacts() []*CompleteMissionResponse_SecureArtifactSpec {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *CompleteMissionResponse) GetOtherRewards() []*Reward {
	if x != nil {
		return x.OtherRewards
	}
	return nil
}

func (x *CompleteMissionResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type CraftArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo         *BasicRequestInfo        `protobuf:"bytes,5,opt,name=rinfo" json:"rinfo,omitempty"`
	EiUserId      *string                  `protobuf:"bytes,1,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	Spec          *ArtifactSpec            `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	ItemId        *uint64                  `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	GoldPricePaid *float64                 `protobuf:"fixed64,6,opt,name=gold_price_paid,json=goldPricePaid" json:"gold_price_paid,omitempty"`
	Ingredients   []*ArtifactInventoryItem `protobuf:"bytes,4,rep,name=ingredients" json:"ingredients,omitempty"`
}

func (x *CraftArtifactRequest) Reset() {
	*x = CraftArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftArtifactRequest) ProtoMessage() {}

func (x *CraftArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftArtifactRequest.ProtoReflect.Descriptor instead.
func (*CraftArtifactRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{60}
}

func (x *CraftArtifactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CraftArtifactRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *CraftArtifactRequest) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CraftArtifactRequest) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CraftArtifactRequest) GetGoldPricePaid() float64 {
	if x != nil && x.GoldPricePaid != nil {
		return *x.GoldPricePaid
	}
	return 0
}

func (x *CraftArtifactRequest) GetIngredients() []*ArtifactInventoryItem {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

type CraftArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId         *uint64              `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	EiUserId       *string              `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	RarityAchieved *ArtifactSpec_Rarity `protobuf:"varint,2,opt,name=rarity_achieved,json=rarityAchieved,enum=ei.ArtifactSpec_Rarity,def=0" json:"rarity_achieved,omitempty"`
	ServerId       *string              `protobuf:"bytes,3,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
}

// Default values for CraftArtifactResponse fields.
const (
	Default_CraftArtifactResponse_RarityAchieved = ArtifactSpec_COMMON
)

func (x *CraftArtifactResponse) Reset() {
	*x = CraftArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CraftArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftArtifactResponse) ProtoMessage() {}

func (x *CraftArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftArtifactResponse.ProtoReflect.Descriptor instead.
func (*CraftArtifactResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{61}
}

func (x *CraftArtifactResponse) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CraftArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *CraftArtifactResponse) GetRarityAchieved() ArtifactSpec_Rarity {
	if x != nil && x.RarityAchieved != nil {
		return *x.RarityAchieved
	}
	return Default_CraftArtifactResponse_RarityAchieved
}

func (x *CraftArtifactResponse) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

type ConsumeArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo          *BasicRequestInfo `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	EiUserId       *string           `protobuf:"bytes,3,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	Spec           *ArtifactSpec     `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	OriginalItemId *uint64           `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
}

func (x *ConsumeArtifactRequest) Reset() {
	*x = ConsumeArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeArtifactRequest) ProtoMessage() {}

func (x *ConsumeArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeArtifactRequest.ProtoReflect.Descriptor instead.
func (*ConsumeArtifactRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{62}
}

func (x *ConsumeArtifactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ConsumeArtifactRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *ConsumeArtifactRequest) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ConsumeArtifactRequest) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

type ConsumeArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool           `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	OriginalItemId *uint64         `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	Byproducts     []*ArtifactSpec `protobuf:"bytes,3,rep,name=byproducts" json:"byproducts,omitempty"`
	OtherRewards   []*Reward       `protobuf:"bytes,4,rep,name=other_rewards,json=otherRewards" json:"other_rewards,omitempty"`
	EiUserId       *string         `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
}

func (x *ConsumeArtifactResponse) Reset() {
	*x = ConsumeArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeArtifactResponse) ProtoMessage() {}

func (x *ConsumeArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeArtifactResponse.ProtoReflect.Descriptor instead.
func (*ConsumeArtifactResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{63}
}

func (x *ConsumeArtifactResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ConsumeArtifactResponse) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *ConsumeArtifactResponse) GetByproducts() []*ArtifactSpec {
	if x != nil {
		return x.Byproducts
	}
	return nil
}

func (x *ConsumeArtifactResponse) GetOtherRewards() []*Reward {
	if x != nil {
		return x.OtherRewards
	}
	return nil
}

func (x *ConsumeArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type SetArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rinfo         *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	Artifact      *ArtifactInventoryItem `protobuf:"bytes,2,opt,name=artifact" json:"artifact,omitempty"`
	Stones        []*ArtifactSpec        `protobuf:"bytes,3,rep,name=stones" json:"stones,omitempty"`
	GoldPricePaid *float64               `protobuf:"fixed64,4,opt,name=gold_price_paid,json=goldPricePaid" json:"gold_price_paid,omitempty"`
}

func (x *SetArtifactRequest) Reset() {
	*x = SetArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArtifactRequest) ProtoMessage() {}

func (x *SetArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArtifactRequest.ProtoReflect.Descriptor instead.
func (*SetArtifactRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{64}
}

func (x *SetArtifactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *SetArtifactRequest) GetArtifact() *ArtifactInventoryItem {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *SetArtifactRequest) GetStones() []*ArtifactSpec {
	if x != nil {
		return x.Stones
	}
	return nil
}

func (x *SetArtifactRequest) GetGoldPricePaid() float64 {
	if x != nil && x.GoldPricePaid != nil {
		return *x.GoldPricePaid
	}
	return 0
}

type SetArtifactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	OriginalItemId *uint64 `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	EiUserId       *string `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
}

func (x *SetArtifactResponse) Reset() {
	*x = SetArtifactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArtifactResponse) ProtoMessage() {}

func (x *SetArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArtifactResponse.ProtoReflect.Descriptor instead.
func (*SetArtifactResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{65}
}

func (x *SetArtifactResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *SetArtifactResponse) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *SetArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type ArtifactsDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryItems      []*ArtifactInventoryItem          `protobuf:"bytes,1,rep,name=inventory_items,json=inventoryItems" json:"inventory_items,omitempty"`
	ItemSequence        *uint64                           `protobuf:"varint,2,opt,name=item_sequence,json=itemSequence" json:"item_sequence,omitempty"`
	InventorySlots      []*InventorySlot                  `protobuf:"bytes,3,rep,name=inventory_slots,json=inventorySlots" json:"inventory_slots,omitempty"`
	ActiveArtifacts     []*ArtifactsDB_ActiveArtifactSlot `protobuf:"bytes,7,rep,name=active_artifacts,json=activeArtifacts" json:"active_artifacts,omitempty"`
	ActiveArtifactSets  []*ArtifactsDB_ActiveArtifactSet  `protobuf:"bytes,11,rep,name=active_artifact_sets,json=activeArtifactSets" json:"active_artifact_sets,omitempty"`
	DiscoveredArtifacts []*ArtifactSpec                   `protobuf:"bytes,8,rep,name=discovered_artifacts,json=discoveredArtifacts" json:"discovered_artifacts,omitempty"`
	CraftableArtifacts  []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,9,rep,name=craftable_artifacts,json=craftableArtifacts" json:"craftable_artifacts,omitempty"`
	CraftingCounts      []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,10,rep,name=crafting_counts,json=craftingCounts" json:"crafting_counts,omitempty"`
	MissionInfos        []*MissionInfo                    `protobuf:"bytes,4,rep,name=mission_infos,json=missionInfos" json:"mission_infos,omitempty"`
	MissionArchive      []*MissionInfo                    `protobuf:"bytes,5,rep,name=mission_archive,json=missionArchive" json:"mission_archive,omitempty"`
}

func (x *ArtifactsDB) Reset() {
	*x = ArtifactsDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB) ProtoMessage() {}

func (x *ArtifactsDB) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB.ProtoReflect.Descriptor instead.
func (*ArtifactsDB) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{66}
}

func (x *ArtifactsDB) GetInventoryItems() []*ArtifactInventoryItem {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *ArtifactsDB) GetItemSequence() uint64 {
	if x != nil && x.ItemSequence != nil {
		return *x.ItemSequence
	}
	return 0
}

func (x *ArtifactsDB) GetInventorySlots() []*InventorySlot {
	if x != nil {
		return x.InventorySlots
	}
	return nil
}

func (x *ArtifactsDB) GetActiveArtifacts() []*ArtifactsDB_ActiveArtifactSlot {
	if x != nil {
		return x.ActiveArtifacts
	}
	return nil
}

func (x *ArtifactsDB) GetActiveArtifactSets() []*ArtifactsDB_ActiveArtifactSet {
	if x != nil {
		return x.ActiveArtifactSets
	}
	return nil
}

func (x *ArtifactsDB) GetDiscoveredArtifacts() []*ArtifactSpec {
	if x != nil {
		return x.DiscoveredArtifacts
	}
	return nil
}

func (x *ArtifactsDB) GetCraftableArtifacts() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.CraftableArtifacts
	}
	return nil
}

func (x *ArtifactsDB) GetCraftingCounts() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.CraftingCounts
	}
	return nil
}

func (x *ArtifactsDB) GetMissionInfos() []*MissionInfo {
	if x != nil {
		return x.MissionInfos
	}
	return nil
}

func (x *ArtifactsDB) GetMissionArchive() []*MissionInfo {
	if x != nil {
		return x.MissionArchive
	}
	return nil
}

type AuthenticatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Code    *string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (x *AuthenticatedMessage) Reset() {
	*x = AuthenticatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedMessage) ProtoMessage() {}

func (x *AuthenticatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedMessage.ProtoReflect.Descriptor instead.
func (*AuthenticatedMessage) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{67}
}

func (x *AuthenticatedMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AuthenticatedMessage) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type LogCompleteMissionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *MissionRequest          `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res *CompleteMissionResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
}

func (x *LogCompleteMissionPayload) Reset() {
	*x = LogCompleteMissionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCompleteMissionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCompleteMissionPayload) ProtoMessage() {}

func (x *LogCompleteMissionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCompleteMissionPayload.ProtoReflect.Descriptor instead.
func (*LogCompleteMissionPayload) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{68}
}

func (x *LogCompleteMissionPayload) GetReq() *MissionRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogCompleteMissionPayload) GetRes() *CompleteMissionResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type LogCraftArtifactPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *CraftArtifactRequest  `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res *CraftArtifactResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
}

func (x *LogCraftArtifactPayload) Reset() {
	*x = LogCraftArtifactPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCraftArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCraftArtifactPayload) ProtoMessage() {}

func (x *LogCraftArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCraftArtifactPayload.ProtoReflect.Descriptor instead.
func (*LogCraftArtifactPayload) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{69}
}

func (x *LogCraftArtifactPayload) GetReq() *CraftArtifactRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogCraftArtifactPayload) GetRes() *CraftArtifactResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type LogConsumeArtifactPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *ConsumeArtifactRequest  `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res *ConsumeArtifactResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
}

func (x *LogConsumeArtifactPayload) Reset() {
	*x = LogConsumeArtifactPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConsumeArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConsumeArtifactPayload) ProtoMessage() {}

func (x *LogConsumeArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConsumeArtifactPayload.ProtoReflect.Descriptor instead.
func (*LogConsumeArtifactPayload) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{70}
}

func (x *LogConsumeArtifactPayload) GetReq() *ConsumeArtifactRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogConsumeArtifactPayload) GetRes() *ConsumeArtifactResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type LogSetArtifactPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *SetArtifactRequest  `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res *SetArtifactResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
}

func (x *LogSetArtifactPayload) Reset() {
	*x = LogSetArtifactPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSetArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSetArtifactPayload) ProtoMessage() {}

func (x *LogSetArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSetArtifactPayload.ProtoReflect.Descriptor instead.
func (*LogSetArtifactPayload) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{71}
}

func (x *LogSetArtifactPayload) GetReq() *SetArtifactRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogSetArtifactPayload) GetRes() *SetArtifactResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type AccountTransferPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId     *string `protobuf:"bytes,1,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	ToEiUserId *string `protobuf:"bytes,2,opt,name=to_ei_user_id,json=toEiUserId" json:"to_ei_user_id,omitempty"`
}

func (x *AccountTransferPayload) Reset() {
	*x = AccountTransferPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTransferPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransferPayload) ProtoMessage() {}

func (x *AccountTransferPayload) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransferPayload.ProtoReflect.Descriptor instead.
func (*AccountTransferPayload) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{72}
}

func (x *AccountTransferPayload) GetFromId() string {
	if x != nil && x.FromId != nil {
		return *x.FromId
	}
	return ""
}

func (x *AccountTransferPayload) GetToEiUserId() string {
	if x != nil && x.ToEiUserId != nil {
		return *x.ToEiUserId
	}
	return ""
}

type SaveBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorCode      *uint32 `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Message        *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ExistingBackup *Backup `protobuf:"bytes,4,opt,name=existing_backup,json=existingBackup" json:"existing_backup,omitempty"`
}

func (x *SaveBackupResponse) Reset() {
	*x = SaveBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBackupResponse) ProtoMessage() {}

func (x *SaveBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBackupResponse.ProtoReflect.Descriptor instead.
func (*SaveBackupResponse) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{73}
}

func (x *SaveBackupResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *SaveBackupResponse) GetErrorCode() uint32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *SaveBackupResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SaveBackupResponse) GetExistingBackup() *Backup {
	if x != nil {
		return x.ExistingBackup
	}
	return nil
}

type CleanAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EiUserIdToKeep *string `protobuf:"bytes,1,opt,name=ei_user_id_to_keep,json=eiUserIdToKeep" json:"ei_user_id_to_keep,omitempty"`
	GameServicesId *string `protobuf:"bytes,2,opt,name=game_services_id,json=gameServicesId" json:"game_services_id,omitempty"`
}

func (x *CleanAccountRequest) Reset() {
	*x = CleanAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanAccountRequest) ProtoMessage() {}

func (x *CleanAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanAccountRequest.ProtoReflect.Descriptor instead.
func (*CleanAccountRequest) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{74}
}

func (x *CleanAccountRequest) GetEiUserIdToKeep() string {
	if x != nil && x.EiUserIdToKeep != nil {
		return *x.EiUserIdToKeep
	}
	return ""
}

func (x *CleanAccountRequest) GetGameServicesId() string {
	if x != nil && x.GameServicesId != nil {
		return *x.GameServicesId
	}
	return ""
}

type Backup_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sfx                          *bool    `protobuf:"varint,1,opt,name=sfx" json:"sfx,omitempty"`
	Music                        *bool    `protobuf:"varint,2,opt,name=music" json:"music,omitempty"`
	LowBatteryMode               *bool    `protobuf:"varint,3,opt,name=low_battery_mode,json=lowBatteryMode" json:"low_battery_mode,omitempty"`
	LowPerformanceMode           *bool    `protobuf:"varint,4,opt,name=low_performance_mode,json=lowPerformanceMode" json:"low_performance_mode,omitempty"`
	ForceTouchChickenBtn         *bool    `protobuf:"varint,9,opt,name=force_touch_chicken_btn,json=forceTouchChickenBtn" json:"force_touch_chicken_btn,omitempty"`
	NotificationsQueried         *bool    `protobuf:"varint,5,opt,name=notifications_queried,json=notificationsQueried" json:"notifications_queried,omitempty"`
	NotificationsOn              *bool    `protobuf:"varint,6,opt,name=notifications_on,json=notificationsOn" json:"notifications_on,omitempty"`
	NotifyDailyGift              *bool    `protobuf:"varint,11,opt,name=notify_daily_gift,json=notifyDailyGift" json:"notify_daily_gift,omitempty"`
	CoppaQueried                 *bool    `protobuf:"varint,7,opt,name=coppa_queried,json=coppaQueried" json:"coppa_queried,omitempty"`
	CoppaRestricted              *bool    `protobuf:"varint,8,opt,name=coppa_restricted,json=coppaRestricted" json:"coppa_restricted,omitempty"`
	GdprConsentQueried           *bool    `protobuf:"varint,12,opt,name=gdpr_consent_queried,json=gdprConsentQueried" json:"gdpr_consent_queried,omitempty"`
	GdprAgeRestricted            *bool    `protobuf:"varint,16,opt,name=gdpr_age_restricted,json=gdprAgeRestricted" json:"gdpr_age_restricted,omitempty"`
	GdprConsentGiven             *bool    `protobuf:"varint,13,opt,name=gdpr_consent_given,json=gdprConsentGiven" json:"gdpr_consent_given,omitempty"`
	AgeQueried                   *bool    `protobuf:"varint,18,opt,name=age_queried,json=ageQueried" json:"age_queried,omitempty"`
	AgeRestricted                *bool    `protobuf:"varint,19,opt,name=age_restricted,json=ageRestricted,def=0" json:"age_restricted,omitempty"`
	DataCollectionConsentQueried *bool    `protobuf:"varint,20,opt,name=data_collection_consent_queried,json=dataCollectionConsentQueried" json:"data_collection_consent_queried,omitempty"`
	DataCollectionConsentGiven   *bool    `protobuf:"varint,21,opt,name=data_collection_consent_given,json=dataCollectionConsentGiven" json:"data_collection_consent_given,omitempty"`
	LastDayAgeQueried            *uint32  `protobuf:"varint,17,opt,name=last_day_age_queried,json=lastDayAgeQueried" json:"last_day_age_queried,omitempty"`
	UserAdsEnabled               *bool    `protobuf:"varint,14,opt,name=user_ads_enabled,json=userAdsEnabled,def=1" json:"user_ads_enabled,omitempty"`
	UserCloudEnabled             *bool    `protobuf:"varint,15,opt,name=user_cloud_enabled,json=userCloudEnabled,def=1" json:"user_cloud_enabled,omitempty"`
	UserAnalyticsEnabled         *bool    `protobuf:"varint,22,opt,name=user_analytics_enabled,json=userAnalyticsEnabled,def=1" json:"user_analytics_enabled,omitempty"`
	UserPersonalizedAdsEnabled   *bool    `protobuf:"varint,23,opt,name=user_personalized_ads_enabled,json=userPersonalizedAdsEnabled,def=1" json:"user_personalized_ads_enabled,omitempty"`
	LowPerformance               *bool    `protobuf:"varint,10,opt,name=low_performance,json=lowPerformance" json:"low_performance,omitempty"`
	LastBackupTime               *float64 `protobuf:"fixed64,24,opt,name=last_backup_time,json=lastBackupTime" json:"last_backup_time,omitempty"`
}

// Default values for Backup_Settings fields.
const (
	Default_Backup_Settings_AgeRestricted              = bool(false)
	Default_Backup_Settings_UserAdsEnabled             = bool(true)
	Default_Backup_Settings_UserCloudEnabled           = bool(true)
	Default_Backup_Settings_UserAnalyticsEnabled       = bool(true)
	Default_Backup_Settings_UserPersonalizedAdsEnabled = bool(true)
)

func (x *Backup_Settings) Reset() {
	*x = Backup_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Settings) ProtoMessage() {}

func (x *Backup_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Settings.ProtoReflect.Descriptor instead.
func (*Backup_Settings) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Backup_Settings) GetSfx() bool {
	if x != nil && x.Sfx != nil {
		return *x.Sfx
	}
	return false
}

func (x *Backup_Settings) GetMusic() bool {
	if x != nil && x.Music != nil {
		return *x.Music
	}
	return false
}

func (x *Backup_Settings) GetLowBatteryMode() bool {
	if x != nil && x.LowBatteryMode != nil {
		return *x.LowBatteryMode
	}
	return false
}

func (x *Backup_Settings) GetLowPerformanceMode() bool {
	if x != nil && x.LowPerformanceMode != nil {
		return *x.LowPerformanceMode
	}
	return false
}

func (x *Backup_Settings) GetForceTouchChickenBtn() bool {
	if x != nil && x.ForceTouchChickenBtn != nil {
		return *x.ForceTouchChickenBtn
	}
	return false
}

func (x *Backup_Settings) GetNotificationsQueried() bool {
	if x != nil && x.NotificationsQueried != nil {
		return *x.NotificationsQueried
	}
	return false
}

func (x *Backup_Settings) GetNotificationsOn() bool {
	if x != nil && x.NotificationsOn != nil {
		return *x.NotificationsOn
	}
	return false
}

func (x *Backup_Settings) GetNotifyDailyGift() bool {
	if x != nil && x.NotifyDailyGift != nil {
		return *x.NotifyDailyGift
	}
	return false
}

func (x *Backup_Settings) GetCoppaQueried() bool {
	if x != nil && x.CoppaQueried != nil {
		return *x.CoppaQueried
	}
	return false
}

func (x *Backup_Settings) GetCoppaRestricted() bool {
	if x != nil && x.CoppaRestricted != nil {
		return *x.CoppaRestricted
	}
	return false
}

func (x *Backup_Settings) GetGdprConsentQueried() bool {
	if x != nil && x.GdprConsentQueried != nil {
		return *x.GdprConsentQueried
	}
	return false
}

func (x *Backup_Settings) GetGdprAgeRestricted() bool {
	if x != nil && x.GdprAgeRestricted != nil {
		return *x.GdprAgeRestricted
	}
	return false
}

func (x *Backup_Settings) GetGdprConsentGiven() bool {
	if x != nil && x.GdprConsentGiven != nil {
		return *x.GdprConsentGiven
	}
	return false
}

func (x *Backup_Settings) GetAgeQueried() bool {
	if x != nil && x.AgeQueried != nil {
		return *x.AgeQueried
	}
	return false
}

func (x *Backup_Settings) GetAgeRestricted() bool {
	if x != nil && x.AgeRestricted != nil {
		return *x.AgeRestricted
	}
	return Default_Backup_Settings_AgeRestricted
}

func (x *Backup_Settings) GetDataCollectionConsentQueried() bool {
	if x != nil && x.DataCollectionConsentQueried != nil {
		return *x.DataCollectionConsentQueried
	}
	return false
}

func (x *Backup_Settings) GetDataCollectionConsentGiven() bool {
	if x != nil && x.DataCollectionConsentGiven != nil {
		return *x.DataCollectionConsentGiven
	}
	return false
}

func (x *Backup_Settings) GetLastDayAgeQueried() uint32 {
	if x != nil && x.LastDayAgeQueried != nil {
		return *x.LastDayAgeQueried
	}
	return 0
}

func (x *Backup_Settings) GetUserAdsEnabled() bool {
	if x != nil && x.UserAdsEnabled != nil {
		return *x.UserAdsEnabled
	}
	return Default_Backup_Settings_UserAdsEnabled
}

func (x *Backup_Settings) GetUserCloudEnabled() bool {
	if x != nil && x.UserCloudEnabled != nil {
		return *x.UserCloudEnabled
	}
	return Default_Backup_Settings_UserCloudEnabled
}

func (x *Backup_Settings) GetUserAnalyticsEnabled() bool {
	if x != nil && x.UserAnalyticsEnabled != nil {
		return *x.UserAnalyticsEnabled
	}
	return Default_Backup_Settings_UserAnalyticsEnabled
}

func (x *Backup_Settings) GetUserPersonalizedAdsEnabled() bool {
	if x != nil && x.UserPersonalizedAdsEnabled != nil {
		return *x.UserPersonalizedAdsEnabled
	}
	return Default_Backup_Settings_UserPersonalizedAdsEnabled
}

func (x *Backup_Settings) GetLowPerformance() bool {
	if x != nil && x.LowPerformance != nil {
		return *x.LowPerformance
	}
	return false
}

func (x *Backup_Settings) GetLastBackupTime() float64 {
	if x != nil && x.LastBackupTime != nil {
		return *x.LastBackupTime
	}
	return 0
}

type Backup_Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntroShown         *bool  `protobuf:"varint,1,opt,name=intro_shown,json=introShown" json:"intro_shown,omitempty"`
	ClickTutorialShown *bool  `protobuf:"varint,2,opt,name=click_tutorial_shown,json=clickTutorialShown" json:"click_tutorial_shown,omitempty"`
	BuyHabShown        *bool  `protobuf:"varint,3,opt,name=buy_hab_shown,json=buyHabShown" json:"buy_hab_shown,omitempty"`
	HireVehicleShown   *bool  `protobuf:"varint,4,opt,name=hire_vehicle_shown,json=hireVehicleShown" json:"hire_vehicle_shown,omitempty"`
	QNumShown          *bool  `protobuf:"varint,5,opt,name=q_num_shown,json=qNumShown" json:"q_num_shown,omitempty"`
	SNumShown          *bool  `protobuf:"varint,6,opt,name=s_num_shown,json=sNumShown" json:"s_num_shown,omitempty"`
	ContractsTabShown  *bool  `protobuf:"varint,7,opt,name=contracts_tab_shown,json=contractsTabShown" json:"contracts_tab_shown,omitempty"`
	ContractInfoShown  *bool  `protobuf:"varint,8,opt,name=contract_info_shown,json=contractInfoShown" json:"contract_info_shown,omitempty"`
	JoinCoopShown      *bool  `protobuf:"varint,9,opt,name=join_coop_shown,json=joinCoopShown" json:"join_coop_shown,omitempty"`
	SwitchFarmShown    *bool  `protobuf:"varint,10,opt,name=switch_farm_shown,json=switchFarmShown" json:"switch_farm_shown,omitempty"`
	TutorialShown      []bool `protobuf:"varint,11,rep,name=tutorial_shown,json=tutorialShown" json:"tutorial_shown,omitempty"`
}

func (x *Backup_Tutorial) Reset() {
	*x = Backup_Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Tutorial) ProtoMessage() {}

func (x *Backup_Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Tutorial.ProtoReflect.Descriptor instead.
func (*Backup_Tutorial) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Backup_Tutorial) GetIntroShown() bool {
	if x != nil && x.IntroShown != nil {
		return *x.IntroShown
	}
	return false
}

func (x *Backup_Tutorial) GetClickTutorialShown() bool {
	if x != nil && x.ClickTutorialShown != nil {
		return *x.ClickTutorialShown
	}
	return false
}

func (x *Backup_Tutorial) GetBuyHabShown() bool {
	if x != nil && x.BuyHabShown != nil {
		return *x.BuyHabShown
	}
	return false
}

func (x *Backup_Tutorial) GetHireVehicleShown() bool {
	if x != nil && x.HireVehicleShown != nil {
		return *x.HireVehicleShown
	}
	return false
}

func (x *Backup_Tutorial) GetQNumShown() bool {
	if x != nil && x.QNumShown != nil {
		return *x.QNumShown
	}
	return false
}

func (x *Backup_Tutorial) GetSNumShown() bool {
	if x != nil && x.SNumShown != nil {
		return *x.SNumShown
	}
	return false
}

func (x *Backup_Tutorial) GetContractsTabShown() bool {
	if x != nil && x.ContractsTabShown != nil {
		return *x.ContractsTabShown
	}
	return false
}

func (x *Backup_Tutorial) GetContractInfoShown() bool {
	if x != nil && x.ContractInfoShown != nil {
		return *x.ContractInfoShown
	}
	return false
}

func (x *Backup_Tutorial) GetJoinCoopShown() bool {
	if x != nil && x.JoinCoopShown != nil {
		return *x.JoinCoopShown
	}
	return false
}

func (x *Backup_Tutorial) GetSwitchFarmShown() bool {
	if x != nil && x.SwitchFarmShown != nil {
		return *x.SwitchFarmShown
	}
	return false
}

func (x *Backup_Tutorial) GetTutorialShown() []bool {
	if x != nil {
		return x.TutorialShown
	}
	return nil
}

type Backup_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EggTotals_OLD           []uint64  `protobuf:"varint,1,rep,name=egg_totals_OLD,json=eggTotalsOLD" json:"egg_totals_OLD,omitempty"`
	EggTotals               []float64 `protobuf:"fixed64,8,rep,name=egg_totals,json=eggTotals" json:"egg_totals,omitempty"`
	UnlimitedChickensUses   *uint64   `protobuf:"varint,7,opt,name=unlimited_chickens_uses,json=unlimitedChickensUses" json:"unlimited_chickens_uses,omitempty"`
	RefillUses              *uint64   `protobuf:"varint,2,opt,name=refill_uses,json=refillUses" json:"refill_uses,omitempty"`
	Warp_1Uses              *uint64   `protobuf:"varint,4,opt,name=warp_1_uses,json=warp1Uses" json:"warp_1_uses,omitempty"`
	Warp_8Uses              *uint64   `protobuf:"varint,5,opt,name=warp_8_uses,json=warp8Uses" json:"warp_8_uses,omitempty"`
	BoostsUsed              *uint64   `protobuf:"varint,13,opt,name=boosts_used,json=boostsUsed" json:"boosts_used,omitempty"`
	VideoDoublerUses        *uint64   `protobuf:"varint,3,opt,name=video_doubler_uses,json=videoDoublerUses" json:"video_doubler_uses,omitempty"`
	DroneTakedowns          *uint64   `protobuf:"varint,6,opt,name=drone_takedowns,json=droneTakedowns" json:"drone_takedowns,omitempty"`
	DroneTakedownsElite     *uint64   `protobuf:"varint,10,opt,name=drone_takedowns_elite,json=droneTakedownsElite" json:"drone_takedowns_elite,omitempty"`
	NumPrestiges            *uint64   `protobuf:"varint,9,opt,name=num_prestiges,json=numPrestiges" json:"num_prestiges,omitempty"`
	NumPiggyBreaks          *uint64   `protobuf:"varint,11,opt,name=num_piggy_breaks,json=numPiggyBreaks" json:"num_piggy_breaks,omitempty"`
	IapPacksPurchased       *uint64   `protobuf:"varint,12,opt,name=iap_packs_purchased,json=iapPacksPurchased" json:"iap_packs_purchased,omitempty"`
	PiggyFull               *bool     `protobuf:"varint,14,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull          *bool     `protobuf:"varint,15,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	TimePiggyFilledRealtime *float64  `protobuf:"fixed64,16,opt,name=time_piggy_filled_realtime,json=timePiggyFilledRealtime" json:"time_piggy_filled_realtime,omitempty"`
	TimePiggyFullGametime   *float64  `protobuf:"fixed64,17,opt,name=time_piggy_full_gametime,json=timePiggyFullGametime" json:"time_piggy_full_gametime,omitempty"`
	LostPiggyIncrements     *uint64   `protobuf:"varint,18,opt,name=lost_piggy_increments,json=lostPiggyIncrements" json:"lost_piggy_increments,omitempty"`
}

func (x *Backup_Stats) Reset() {
	*x = Backup_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Stats) ProtoMessage() {}

func (x *Backup_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Stats.ProtoReflect.Descriptor instead.
func (*Backup_Stats) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Backup_Stats) GetEggTotals_OLD() []uint64 {
	if x != nil {
		return x.EggTotals_OLD
	}
	return nil
}

func (x *Backup_Stats) GetEggTotals() []float64 {
	if x != nil {
		return x.EggTotals
	}
	return nil
}

func (x *Backup_Stats) GetUnlimitedChickensUses() uint64 {
	if x != nil && x.UnlimitedChickensUses != nil {
		return *x.UnlimitedChickensUses
	}
	return 0
}

func (x *Backup_Stats) GetRefillUses() uint64 {
	if x != nil && x.RefillUses != nil {
		return *x.RefillUses
	}
	return 0
}

func (x *Backup_Stats) GetWarp_1Uses() uint64 {
	if x != nil && x.Warp_1Uses != nil {
		return *x.Warp_1Uses
	}
	return 0
}

func (x *Backup_Stats) GetWarp_8Uses() uint64 {
	if x != nil && x.Warp_8Uses != nil {
		return *x.Warp_8Uses
	}
	return 0
}

func (x *Backup_Stats) GetBoostsUsed() uint64 {
	if x != nil && x.BoostsUsed != nil {
		return *x.BoostsUsed
	}
	return 0
}

func (x *Backup_Stats) GetVideoDoublerUses() uint64 {
	if x != nil && x.VideoDoublerUses != nil {
		return *x.VideoDoublerUses
	}
	return 0
}

func (x *Backup_Stats) GetDroneTakedowns() uint64 {
	if x != nil && x.DroneTakedowns != nil {
		return *x.DroneTakedowns
	}
	return 0
}

func (x *Backup_Stats) GetDroneTakedownsElite() uint64 {
	if x != nil && x.DroneTakedownsElite != nil {
		return *x.DroneTakedownsElite
	}
	return 0
}

func (x *Backup_Stats) GetNumPrestiges() uint64 {
	if x != nil && x.NumPrestiges != nil {
		return *x.NumPrestiges
	}
	return 0
}

func (x *Backup_Stats) GetNumPiggyBreaks() uint64 {
	if x != nil && x.NumPiggyBreaks != nil {
		return *x.NumPiggyBreaks
	}
	return 0
}

func (x *Backup_Stats) GetIapPacksPurchased() uint64 {
	if x != nil && x.IapPacksPurchased != nil {
		return *x.IapPacksPurchased
	}
	return 0
}

func (x *Backup_Stats) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *Backup_Stats) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *Backup_Stats) GetTimePiggyFilledRealtime() float64 {
	if x != nil && x.TimePiggyFilledRealtime != nil {
		return *x.TimePiggyFilledRealtime
	}
	return 0
}

func (x *Backup_Stats) GetTimePiggyFullGametime() float64 {
	if x != nil && x.TimePiggyFullGametime != nil {
		return *x.TimePiggyFullGametime
	}
	return 0
}

func (x *Backup_Stats) GetLostPiggyIncrements() uint64 {
	if x != nil && x.LostPiggyIncrements != nil {
		return *x.LostPiggyIncrements
	}
	return 0
}

type Backup_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFarm                   *uint32                   `protobuf:"varint,22,opt,name=current_farm,json=currentFarm,def=0" json:"current_farm,omitempty"`
	MaxEggReached                 *Egg                      `protobuf:"varint,1,opt,name=max_egg_reached,json=maxEggReached,enum=ei.Egg" json:"max_egg_reached,omitempty"`
	GoldenEggsEarned              *uint64                   `protobuf:"varint,2,opt,name=golden_eggs_earned,json=goldenEggsEarned" json:"golden_eggs_earned,omitempty"`
	GoldenEggsSpent               *uint64                   `protobuf:"varint,3,opt,name=golden_eggs_spent,json=goldenEggsSpent" json:"golden_eggs_spent,omitempty"`
	UncliamedGoldenEggs           *uint64                   `protobuf:"varint,16,opt,name=uncliamed_golden_eggs,json=uncliamedGoldenEggs" json:"uncliamed_golden_eggs,omitempty"`
	SoulEggs                      *uint64                   `protobuf:"varint,4,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	UnclaimedSoulEggs             *uint64                   `protobuf:"varint,17,opt,name=unclaimed_soul_eggs,json=unclaimedSoulEggs" json:"unclaimed_soul_eggs,omitempty"`
	SoulEggsD                     *float64                  `protobuf:"fixed64,34,opt,name=soul_eggs_d,json=soulEggsD" json:"soul_eggs_d,omitempty"`
	UnclaimedSoulEggsD            *float64                  `protobuf:"fixed64,35,opt,name=unclaimed_soul_eggs_d,json=unclaimedSoulEggsD" json:"unclaimed_soul_eggs_d,omitempty"`
	EggsOfProphecy                *uint64                   `protobuf:"varint,23,opt,name=eggs_of_prophecy,json=eggsOfProphecy" json:"eggs_of_prophecy,omitempty"`
	UnclaimedEggsOfProphecy       *uint64                   `protobuf:"varint,24,opt,name=unclaimed_eggs_of_prophecy,json=unclaimedEggsOfProphecy" json:"unclaimed_eggs_of_prophecy,omitempty"`
	PrestigeCashEarned            *float64                  `protobuf:"fixed64,5,opt,name=prestige_cash_earned,json=prestigeCashEarned" json:"prestige_cash_earned,omitempty"`
	PrestigeSoulBoostCash         *float64                  `protobuf:"fixed64,33,opt,name=prestige_soul_boost_cash,json=prestigeSoulBoostCash" json:"prestige_soul_boost_cash,omitempty"`
	LifetimeCashEarned            *float64                  `protobuf:"fixed64,6,opt,name=lifetime_cash_earned,json=lifetimeCashEarned" json:"lifetime_cash_earned,omitempty"`
	PiggyBank                     *uint64                   `protobuf:"varint,7,opt,name=piggy_bank,json=piggyBank" json:"piggy_bank,omitempty"`
	PiggyFullAlertShown           *bool                     `protobuf:"varint,31,opt,name=piggy_full_alert_shown,json=piggyFullAlertShown" json:"piggy_full_alert_shown,omitempty"`
	PermitLevel                   *uint32                   `protobuf:"varint,8,opt,name=permit_level,json=permitLevel" json:"permit_level,omitempty"`
	EpicResearch                  []*Backup_ResearchItem    `protobuf:"bytes,9,rep,name=epic_research,json=epicResearch" json:"epic_research,omitempty"`
	HyperloopStation              *bool                     `protobuf:"varint,29,opt,name=hyperloop_station,json=hyperloopStation" json:"hyperloop_station,omitempty"`
	NextDailyGiftTime             *float64                  `protobuf:"fixed64,10,opt,name=next_daily_gift_time,json=nextDailyGiftTime" json:"next_daily_gift_time,omitempty"`
	LastDailyGiftCollectedDay     *uint32                   `protobuf:"varint,20,opt,name=last_daily_gift_collected_day,json=lastDailyGiftCollectedDay" json:"last_daily_gift_collected_day,omitempty"`
	NumDailyGiftsCollected        *uint32                   `protobuf:"varint,28,opt,name=num_daily_gifts_collected,json=numDailyGiftsCollected" json:"num_daily_gifts_collected,omitempty"`
	News                          []*Backup_NewsHeadline    `protobuf:"bytes,11,rep,name=news" json:"news,omitempty"`
	LastNewsTime                  *float64                  `protobuf:"fixed64,12,opt,name=last_news_time,json=lastNewsTime" json:"last_news_time,omitempty"`
	CurrentMultiplier             *float64                  `protobuf:"fixed64,13,opt,name=current_multiplier,json=currentMultiplier" json:"current_multiplier,omitempty"`
	CurrentMultiplierExpiration   *float64                  `protobuf:"fixed64,14,opt,name=current_multiplier_expiration,json=currentMultiplierExpiration" json:"current_multiplier_expiration,omitempty"`
	Achievements                  []*Backup_AchievementInfo `protobuf:"bytes,15,rep,name=achievements" json:"achievements,omitempty"`
	MaxFarmSizeReached            []uint64                  `protobuf:"varint,18,rep,name=max_farm_size_reached,json=maxFarmSizeReached" json:"max_farm_size_reached,omitempty"`
	EggMedalLevel                 []uint32                  `protobuf:"varint,19,rep,name=egg_medal_level,json=eggMedalLevel" json:"egg_medal_level,omitempty"`
	LongIdleNotificationSet       *bool                     `protobuf:"varint,25,opt,name=long_idle_notification_set,json=longIdleNotificationSet" json:"long_idle_notification_set,omitempty"`
	LongIdleNotificationThreshold *float64                  `protobuf:"fixed64,26,opt,name=long_idle_notification_threshold,json=longIdleNotificationThreshold" json:"long_idle_notification_threshold,omitempty"`
	LongIdleReward                *float64                  `protobuf:"fixed64,27,opt,name=long_idle_reward,json=longIdleReward" json:"long_idle_reward,omitempty"`
	Boosts                        []*Backup_OwnedBoost      `protobuf:"bytes,30,rep,name=boosts" json:"boosts,omitempty"`
	TotalTimeCheatsDetected       *uint32                   `protobuf:"varint,32,opt,name=total_time_cheats_detected,json=totalTimeCheatsDetected" json:"total_time_cheats_detected,omitempty"`
	ForceEliteContracts           *bool                     `protobuf:"varint,36,opt,name=force_elite_contracts,json=forceEliteContracts" json:"force_elite_contracts,omitempty"`
	NewPlayerEventEndTime         *float64                  `protobuf:"fixed64,37,opt,name=new_player_event_end_time,json=newPlayerEventEndTime" json:"new_player_event_end_time,omitempty"`
}

// Default values for Backup_Game fields.
const (
	Default_Backup_Game_CurrentFarm = uint32(0)
)

func (x *Backup_Game) Reset() {
	*x = Backup_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Game) ProtoMessage() {}

func (x *Backup_Game) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Game.ProtoReflect.Descriptor instead.
func (*Backup_Game) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Backup_Game) GetCurrentFarm() uint32 {
	if x != nil && x.CurrentFarm != nil {
		return *x.CurrentFarm
	}
	return Default_Backup_Game_CurrentFarm
}

func (x *Backup_Game) GetMaxEggReached() Egg {
	if x != nil && x.MaxEggReached != nil {
		return *x.MaxEggReached
	}
	return Egg_EDIBLE
}

func (x *Backup_Game) GetGoldenEggsEarned() uint64 {
	if x != nil && x.GoldenEggsEarned != nil {
		return *x.GoldenEggsEarned
	}
	return 0
}

func (x *Backup_Game) GetGoldenEggsSpent() uint64 {
	if x != nil && x.GoldenEggsSpent != nil {
		return *x.GoldenEggsSpent
	}
	return 0
}

func (x *Backup_Game) GetUncliamedGoldenEggs() uint64 {
	if x != nil && x.UncliamedGoldenEggs != nil {
		return *x.UncliamedGoldenEggs
	}
	return 0
}

func (x *Backup_Game) GetSoulEggs() uint64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedSoulEggs() uint64 {
	if x != nil && x.UnclaimedSoulEggs != nil {
		return *x.UnclaimedSoulEggs
	}
	return 0
}

func (x *Backup_Game) GetSoulEggsD() float64 {
	if x != nil && x.SoulEggsD != nil {
		return *x.SoulEggsD
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedSoulEggsD() float64 {
	if x != nil && x.UnclaimedSoulEggsD != nil {
		return *x.UnclaimedSoulEggsD
	}
	return 0
}

func (x *Backup_Game) GetEggsOfProphecy() uint64 {
	if x != nil && x.EggsOfProphecy != nil {
		return *x.EggsOfProphecy
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedEggsOfProphecy() uint64 {
	if x != nil && x.UnclaimedEggsOfProphecy != nil {
		return *x.UnclaimedEggsOfProphecy
	}
	return 0
}

func (x *Backup_Game) GetPrestigeCashEarned() float64 {
	if x != nil && x.PrestigeCashEarned != nil {
		return *x.PrestigeCashEarned
	}
	return 0
}

func (x *Backup_Game) GetPrestigeSoulBoostCash() float64 {
	if x != nil && x.PrestigeSoulBoostCash != nil {
		return *x.PrestigeSoulBoostCash
	}
	return 0
}

func (x *Backup_Game) GetLifetimeCashEarned() float64 {
	if x != nil && x.LifetimeCashEarned != nil {
		return *x.LifetimeCashEarned
	}
	return 0
}

func (x *Backup_Game) GetPiggyBank() uint64 {
	if x != nil && x.PiggyBank != nil {
		return *x.PiggyBank
	}
	return 0
}

func (x *Backup_Game) GetPiggyFullAlertShown() bool {
	if x != nil && x.PiggyFullAlertShown != nil {
		return *x.PiggyFullAlertShown
	}
	return false
}

func (x *Backup_Game) GetPermitLevel() uint32 {
	if x != nil && x.PermitLevel != nil {
		return *x.PermitLevel
	}
	return 0
}

func (x *Backup_Game) GetEpicResearch() []*Backup_ResearchItem {
	if x != nil {
		return x.EpicResearch
	}
	return nil
}

func (x *Backup_Game) GetHyperloopStation() bool {
	if x != nil && x.HyperloopStation != nil {
		return *x.HyperloopStation
	}
	return false
}

func (x *Backup_Game) GetNextDailyGiftTime() float64 {
	if x != nil && x.NextDailyGiftTime != nil {
		return *x.NextDailyGiftTime
	}
	return 0
}

func (x *Backup_Game) GetLastDailyGiftCollectedDay() uint32 {
	if x != nil && x.LastDailyGiftCollectedDay != nil {
		return *x.LastDailyGiftCollectedDay
	}
	return 0
}

func (x *Backup_Game) GetNumDailyGiftsCollected() uint32 {
	if x != nil && x.NumDailyGiftsCollected != nil {
		return *x.NumDailyGiftsCollected
	}
	return 0
}

func (x *Backup_Game) GetNews() []*Backup_NewsHeadline {
	if x != nil {
		return x.News
	}
	return nil
}

func (x *Backup_Game) GetLastNewsTime() float64 {
	if x != nil && x.LastNewsTime != nil {
		return *x.LastNewsTime
	}
	return 0
}

func (x *Backup_Game) GetCurrentMultiplier() float64 {
	if x != nil && x.CurrentMultiplier != nil {
		return *x.CurrentMultiplier
	}
	return 0
}

func (x *Backup_Game) GetCurrentMultiplierExpiration() float64 {
	if x != nil && x.CurrentMultiplierExpiration != nil {
		return *x.CurrentMultiplierExpiration
	}
	return 0
}

func (x *Backup_Game) GetAchievements() []*Backup_AchievementInfo {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *Backup_Game) GetMaxFarmSizeReached() []uint64 {
	if x != nil {
		return x.MaxFarmSizeReached
	}
	return nil
}

func (x *Backup_Game) GetEggMedalLevel() []uint32 {
	if x != nil {
		return x.EggMedalLevel
	}
	return nil
}

func (x *Backup_Game) GetLongIdleNotificationSet() bool {
	if x != nil && x.LongIdleNotificationSet != nil {
		return *x.LongIdleNotificationSet
	}
	return false
}

func (x *Backup_Game) GetLongIdleNotificationThreshold() float64 {
	if x != nil && x.LongIdleNotificationThreshold != nil {
		return *x.LongIdleNotificationThreshold
	}
	return 0
}

func (x *Backup_Game) GetLongIdleReward() float64 {
	if x != nil && x.LongIdleReward != nil {
		return *x.LongIdleReward
	}
	return 0
}

func (x *Backup_Game) GetBoosts() []*Backup_OwnedBoost {
	if x != nil {
		return x.Boosts
	}
	return nil
}

func (x *Backup_Game) GetTotalTimeCheatsDetected() uint32 {
	if x != nil && x.TotalTimeCheatsDetected != nil {
		return *x.TotalTimeCheatsDetected
	}
	return 0
}

func (x *Backup_Game) GetForceEliteContracts() bool {
	if x != nil && x.ForceEliteContracts != nil {
		return *x.ForceEliteContracts
	}
	return false
}

func (x *Backup_Game) GetNewPlayerEventEndTime() float64 {
	if x != nil && x.NewPlayerEventEndTime != nil {
		return *x.NewPlayerEventEndTime
	}
	return 0
}

type Backup_Artifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infusing                *bool                  `protobuf:"varint,1,opt,name=infusing" json:"infusing,omitempty"`
	ItemBeingInfused        *ArtifactInventoryItem `protobuf:"bytes,2,opt,name=item_being_infused,json=itemBeingInfused" json:"item_being_infused,omitempty"`
	SpecBeingInfused        *ArtifactSpec          `protobuf:"bytes,13,opt,name=spec_being_infused,json=specBeingInfused" json:"spec_being_infused,omitempty"`
	EggTypeInfusing         *Egg                   `protobuf:"varint,3,opt,name=egg_type_infusing,json=eggTypeInfusing,enum=ei.Egg" json:"egg_type_infusing,omitempty"`
	InfusingEggsRequired    *float64               `protobuf:"fixed64,4,opt,name=infusing_eggs_required,json=infusingEggsRequired" json:"infusing_eggs_required,omitempty"`
	EggsInfused             *float64               `protobuf:"fixed64,5,opt,name=eggs_infused,json=eggsInfused" json:"eggs_infused,omitempty"`
	FlowPercentageArtifacts *float64               `protobuf:"fixed64,6,opt,name=flow_percentage_artifacts,json=flowPercentageArtifacts,def=0.5" json:"flow_percentage_artifacts,omitempty"`
	FuelingEnabled          *bool                  `protobuf:"varint,7,opt,name=fueling_enabled,json=fuelingEnabled,def=1" json:"fueling_enabled,omitempty"`
	InfusingEnabled         *bool                  `protobuf:"varint,8,opt,name=infusing_enabled,json=infusingEnabled,def=1" json:"infusing_enabled,omitempty"`
	LastFueledShip          *MissionInfo_Spaceship `protobuf:"varint,9,opt,name=last_fueled_ship,json=lastFueledShip,enum=ei.MissionInfo_Spaceship" json:"last_fueled_ship,omitempty"`
	InventoryScore          *float64               `protobuf:"fixed64,10,opt,name=inventory_score,json=inventoryScore" json:"inventory_score,omitempty"`
	Enabled                 *bool                  `protobuf:"varint,11,opt,name=enabled" json:"enabled,omitempty"`
	IntroShown              *bool                  `protobuf:"varint,12,opt,name=intro_shown,json=introShown" json:"intro_shown,omitempty"`
}

// Default values for Backup_Artifacts fields.
const (
	Default_Backup_Artifacts_FlowPercentageArtifacts = float64(0.5)
	Default_Backup_Artifacts_FuelingEnabled          = bool(true)
	Default_Backup_Artifacts_InfusingEnabled         = bool(true)
)

func (x *Backup_Artifacts) Reset() {
	*x = Backup_Artifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Artifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Artifacts) ProtoMessage() {}

func (x *Backup_Artifacts) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Artifacts.ProtoReflect.Descriptor instead.
func (*Backup_Artifacts) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Backup_Artifacts) GetInfusing() bool {
	if x != nil && x.Infusing != nil {
		return *x.Infusing
	}
	return false
}

func (x *Backup_Artifacts) GetItemBeingInfused() *ArtifactInventoryItem {
	if x != nil {
		return x.ItemBeingInfused
	}
	return nil
}

func (x *Backup_Artifacts) GetSpecBeingInfused() *ArtifactSpec {
	if x != nil {
		return x.SpecBeingInfused
	}
	return nil
}

func (x *Backup_Artifacts) GetEggTypeInfusing() Egg {
	if x != nil && x.EggTypeInfusing != nil {
		return *x.EggTypeInfusing
	}
	return Egg_EDIBLE
}

func (x *Backup_Artifacts) GetInfusingEggsRequired() float64 {
	if x != nil && x.InfusingEggsRequired != nil {
		return *x.InfusingEggsRequired
	}
	return 0
}

func (x *Backup_Artifacts) GetEggsInfused() float64 {
	if x != nil && x.EggsInfused != nil {
		return *x.EggsInfused
	}
	return 0
}

func (x *Backup_Artifacts) GetFlowPercentageArtifacts() float64 {
	if x != nil && x.FlowPercentageArtifacts != nil {
		return *x.FlowPercentageArtifacts
	}
	return Default_Backup_Artifacts_FlowPercentageArtifacts
}

func (x *Backup_Artifacts) GetFuelingEnabled() bool {
	if x != nil && x.FuelingEnabled != nil {
		return *x.FuelingEnabled
	}
	return Default_Backup_Artifacts_FuelingEnabled
}

func (x *Backup_Artifacts) GetInfusingEnabled() bool {
	if x != nil && x.InfusingEnabled != nil {
		return *x.InfusingEnabled
	}
	return Default_Backup_Artifacts_InfusingEnabled
}

func (x *Backup_Artifacts) GetLastFueledShip() MissionInfo_Spaceship {
	if x != nil && x.LastFueledShip != nil {
		return *x.LastFueledShip
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *Backup_Artifacts) GetInventoryScore() float64 {
	if x != nil && x.InventoryScore != nil {
		return *x.InventoryScore
	}
	return 0
}

func (x *Backup_Artifacts) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Backup_Artifacts) GetIntroShown() bool {
	if x != nil && x.IntroShown != nil {
		return *x.IntroShown
	}
	return false
}

type Backup_Simulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EggType                     *Egg                   `protobuf:"varint,1,opt,name=egg_type,json=eggType,enum=ei.Egg" json:"egg_type,omitempty"`
	FarmType                    *FarmType              `protobuf:"varint,19,opt,name=farm_type,json=farmType,enum=ei.FarmType" json:"farm_type,omitempty"`
	ContractId                  *string                `protobuf:"bytes,20,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	CashEarned                  *float64               `protobuf:"fixed64,2,opt,name=cash_earned,json=cashEarned" json:"cash_earned,omitempty"`
	CashSpent                   *float64               `protobuf:"fixed64,3,opt,name=cash_spent,json=cashSpent" json:"cash_spent,omitempty"`
	UnclaimedCash               *float64               `protobuf:"fixed64,4,opt,name=unclaimed_cash,json=unclaimedCash" json:"unclaimed_cash,omitempty"`
	LastStepTime                *float64               `protobuf:"fixed64,5,opt,name=last_step_time,json=lastStepTime" json:"last_step_time,omitempty"`
	NumChickens                 *uint64                `protobuf:"varint,6,opt,name=num_chickens,json=numChickens" json:"num_chickens,omitempty"`
	NumChickensUnsettled        *uint64                `protobuf:"varint,7,opt,name=num_chickens_unsettled,json=numChickensUnsettled" json:"num_chickens_unsettled,omitempty"`
	NumChickensRunning          *uint64                `protobuf:"varint,8,opt,name=num_chickens_running,json=numChickensRunning" json:"num_chickens_running,omitempty"`
	EggsLaid                    *float64               `protobuf:"fixed64,9,opt,name=eggs_laid,json=eggsLaid" json:"eggs_laid,omitempty"`
	EggsShipped                 *float64               `protobuf:"fixed64,30,opt,name=eggs_shipped,json=eggsShipped" json:"eggs_shipped,omitempty"`
	EggsPaidFor                 *float64               `protobuf:"fixed64,10,opt,name=eggs_paid_for,json=eggsPaidFor" json:"eggs_paid_for,omitempty"`
	SilosOwned                  *uint32                `protobuf:"varint,11,opt,name=silos_owned,json=silosOwned" json:"silos_owned,omitempty"`
	Habs                        []uint32               `protobuf:"varint,12,rep,name=habs" json:"habs,omitempty"`
	HabPopulation               []uint64               `protobuf:"varint,13,rep,name=hab_population,json=habPopulation" json:"hab_population,omitempty"`
	HabPopulationIndound        []uint64               `protobuf:"varint,14,rep,name=hab_population_indound,json=habPopulationIndound" json:"hab_population_indound,omitempty"`
	HabIncubatorPopuplation     []float64              `protobuf:"fixed64,15,rep,name=hab_incubator_popuplation,json=habIncubatorPopuplation" json:"hab_incubator_popuplation,omitempty"`
	HatcheryPopulation          *float64               `protobuf:"fixed64,16,opt,name=hatchery_population,json=hatcheryPopulation" json:"hatchery_population,omitempty"`
	Vehicles                    []uint32               `protobuf:"varint,17,rep,name=vehicles" json:"vehicles,omitempty"`
	TrainLength                 []uint32               `protobuf:"varint,21,rep,name=train_length,json=trainLength" json:"train_length,omitempty"`
	CommonResearch              []*Backup_ResearchItem `protobuf:"bytes,18,rep,name=common_research,json=commonResearch" json:"common_research,omitempty"`
	ActiveBoosts                []*Backup_ActiveBoost  `protobuf:"bytes,22,rep,name=active_boosts,json=activeBoosts" json:"active_boosts,omitempty"`
	TimeCheatsDetected          *uint32                `protobuf:"varint,23,opt,name=time_cheats_detected,json=timeCheatsDetected" json:"time_cheats_detected,omitempty"`
	TimeCheatDebt               *float64               `protobuf:"fixed64,24,opt,name=time_cheat_debt,json=timeCheatDebt" json:"time_cheat_debt,omitempty"`
	BoostTokensReceived         *uint32                `protobuf:"varint,25,opt,name=boost_tokens_received,json=boostTokensReceived" json:"boost_tokens_received,omitempty"`
	BoostTokensSpent            *uint32                `protobuf:"varint,26,opt,name=boost_tokens_spent,json=boostTokensSpent" json:"boost_tokens_spent,omitempty"`
	BoostTokensGiven            *uint32                `protobuf:"varint,28,opt,name=boost_tokens_given,json=boostTokensGiven" json:"boost_tokens_given,omitempty"`
	UnclaimedBoostTokens        *uint32                `protobuf:"varint,27,opt,name=unclaimed_boost_tokens,json=unclaimedBoostTokens" json:"unclaimed_boost_tokens,omitempty"`
	GametimeUntilNextBoostToken *float64               `protobuf:"fixed64,29,opt,name=gametime_until_next_boost_token,json=gametimeUntilNextBoostToken" json:"gametime_until_next_boost_token,omitempty"`
}

func (x *Backup_Simulation) Reset() {
	*x = Backup_Simulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Simulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Simulation) ProtoMessage() {}

func (x *Backup_Simulation) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Simulation.ProtoReflect.Descriptor instead.
func (*Backup_Simulation) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Backup_Simulation) GetEggType() Egg {
	if x != nil && x.EggType != nil {
		return *x.EggType
	}
	return Egg_EDIBLE
}

func (x *Backup_Simulation) GetFarmType() FarmType {
	if x != nil && x.FarmType != nil {
		return *x.FarmType
	}
	return FarmType_EMPTY
}

func (x *Backup_Simulation) GetContractId() string {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return ""
}

func (x *Backup_Simulation) GetCashEarned() float64 {
	if x != nil && x.CashEarned != nil {
		return *x.CashEarned
	}
	return 0
}

func (x *Backup_Simulation) GetCashSpent() float64 {
	if x != nil && x.CashSpent != nil {
		return *x.CashSpent
	}
	return 0
}

func (x *Backup_Simulation) GetUnclaimedCash() float64 {
	if x != nil && x.UnclaimedCash != nil {
		return *x.UnclaimedCash
	}
	return 0
}

func (x *Backup_Simulation) GetLastStepTime() float64 {
	if x != nil && x.LastStepTime != nil {
		return *x.LastStepTime
	}
	return 0
}

func (x *Backup_Simulation) GetNumChickens() uint64 {
	if x != nil && x.NumChickens != nil {
		return *x.NumChickens
	}
	return 0
}

func (x *Backup_Simulation) GetNumChickensUnsettled() uint64 {
	if x != nil && x.NumChickensUnsettled != nil {
		return *x.NumChickensUnsettled
	}
	return 0
}

func (x *Backup_Simulation) GetNumChickensRunning() uint64 {
	if x != nil && x.NumChickensRunning != nil {
		return *x.NumChickensRunning
	}
	return 0
}

func (x *Backup_Simulation) GetEggsLaid() float64 {
	if x != nil && x.EggsLaid != nil {
		return *x.EggsLaid
	}
	return 0
}

func (x *Backup_Simulation) GetEggsShipped() float64 {
	if x != nil && x.EggsShipped != nil {
		return *x.EggsShipped
	}
	return 0
}

func (x *Backup_Simulation) GetEggsPaidFor() float64 {
	if x != nil && x.EggsPaidFor != nil {
		return *x.EggsPaidFor
	}
	return 0
}

func (x *Backup_Simulation) GetSilosOwned() uint32 {
	if x != nil && x.SilosOwned != nil {
		return *x.SilosOwned
	}
	return 0
}

func (x *Backup_Simulation) GetHabs() []uint32 {
	if x != nil {
		return x.Habs
	}
	return nil
}

func (x *Backup_Simulation) GetHabPopulation() []uint64 {
	if x != nil {
		return x.HabPopulation
	}
	return nil
}

func (x *Backup_Simulation) GetHabPopulationIndound() []uint64 {
	if x != nil {
		return x.HabPopulationIndound
	}
	return nil
}

func (x *Backup_Simulation) GetHabIncubatorPopuplation() []float64 {
	if x != nil {
		return x.HabIncubatorPopuplation
	}
	return nil
}

func (x *Backup_Simulation) GetHatcheryPopulation() float64 {
	if x != nil && x.HatcheryPopulation != nil {
		return *x.HatcheryPopulation
	}
	return 0
}

func (x *Backup_Simulation) GetVehicles() []uint32 {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

func (x *Backup_Simulation) GetTrainLength() []uint32 {
	if x != nil {
		return x.TrainLength
	}
	return nil
}

func (x *Backup_Simulation) GetCommonResearch() []*Backup_ResearchItem {
	if x != nil {
		return x.CommonResearch
	}
	return nil
}

func (x *Backup_Simulation) GetActiveBoosts() []*Backup_ActiveBoost {
	if x != nil {
		return x.ActiveBoosts
	}
	return nil
}

func (x *Backup_Simulation) GetTimeCheatsDetected() uint32 {
	if x != nil && x.TimeCheatsDetected != nil {
		return *x.TimeCheatsDetected
	}
	return 0
}

func (x *Backup_Simulation) GetTimeCheatDebt() float64 {
	if x != nil && x.TimeCheatDebt != nil {
		return *x.TimeCheatDebt
	}
	return 0
}

func (x *Backup_Simulation) GetBoostTokensReceived() uint32 {
	if x != nil && x.BoostTokensReceived != nil {
		return *x.BoostTokensReceived
	}
	return 0
}

func (x *Backup_Simulation) GetBoostTokensSpent() uint32 {
	if x != nil && x.BoostTokensSpent != nil {
		return *x.BoostTokensSpent
	}
	return 0
}

func (x *Backup_Simulation) GetBoostTokensGiven() uint32 {
	if x != nil && x.BoostTokensGiven != nil {
		return *x.BoostTokensGiven
	}
	return 0
}

func (x *Backup_Simulation) GetUnclaimedBoostTokens() uint32 {
	if x != nil && x.UnclaimedBoostTokens != nil {
		return *x.UnclaimedBoostTokens
	}
	return 0
}

func (x *Backup_Simulation) GetGametimeUntilNextBoostToken() float64 {
	if x != nil && x.GametimeUntilNextBoostToken != nil {
		return *x.GametimeUntilNextBoostToken
	}
	return 0
}

type Backup_Mission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMission  *string               `protobuf:"bytes,1,opt,name=current_mission,json=currentMission" json:"current_mission,omitempty"`
	ReferenceValue  *float64              `protobuf:"fixed64,2,opt,name=reference_value,json=referenceValue" json:"reference_value,omitempty"`
	CurrentMissions []string              `protobuf:"bytes,4,rep,name=current_missions,json=currentMissions" json:"current_missions,omitempty"`
	Missions        []*Backup_MissionInfo `protobuf:"bytes,3,rep,name=missions" json:"missions,omitempty"`
}

func (x *Backup_Mission) Reset() {
	*x = Backup_Mission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Mission) ProtoMessage() {}

func (x *Backup_Mission) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Mission.ProtoReflect.Descriptor instead.
func (*Backup_Mission) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Backup_Mission) GetCurrentMission() string {
	if x != nil && x.CurrentMission != nil {
		return *x.CurrentMission
	}
	return ""
}

func (x *Backup_Mission) GetReferenceValue() float64 {
	if x != nil && x.ReferenceValue != nil {
		return *x.ReferenceValue
	}
	return 0
}

func (x *Backup_Mission) GetCurrentMissions() []string {
	if x != nil {
		return x.CurrentMissions
	}
	return nil
}

func (x *Backup_Mission) GetMissions() []*Backup_MissionInfo {
	if x != nil {
		return x.Missions
	}
	return nil
}

type Backup_Misc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChickenBtnPrefBig         *bool    `protobuf:"varint,1,opt,name=chicken_btn_pref_big,json=chickenBtnPrefBig" json:"chicken_btn_pref_big,omitempty"`
	FreeHatcheryRefillGiven   *bool    `protobuf:"varint,2,opt,name=free_hatchery_refill_given,json=freeHatcheryRefillGiven" json:"free_hatchery_refill_given,omitempty"`
	LastShareFarmValue        *float64 `protobuf:"fixed64,3,opt,name=last_share_farm_value,json=lastShareFarmValue,def=1e+07" json:"last_share_farm_value,omitempty"`
	LastShareSwarmFarmValue   *float64 `protobuf:"fixed64,4,opt,name=last_share_swarm_farm_value,json=lastShareSwarmFarmValue,def=1e+07" json:"last_share_swarm_farm_value,omitempty"`
	LastShareSwarmSize        *float64 `protobuf:"fixed64,5,opt,name=last_share_swarm_size,json=lastShareSwarmSize,def=140" json:"last_share_swarm_size,omitempty"`
	LastPrestigeAlertSoulEggs *uint64  `protobuf:"varint,10,opt,name=last_prestige_alert_soul_eggs,json=lastPrestigeAlertSoulEggs,def=45" json:"last_prestige_alert_soul_eggs,omitempty"`
	FriendRank                *uint64  `protobuf:"varint,6,opt,name=friend_rank,json=friendRank" json:"friend_rank,omitempty"`
	FriendRankPop             *uint64  `protobuf:"varint,7,opt,name=friend_rank_pop,json=friendRankPop" json:"friend_rank_pop,omitempty"`
	GlobalRank                *uint64  `protobuf:"varint,8,opt,name=global_rank,json=globalRank" json:"global_rank,omitempty"`
	GlobalRankPop             *uint64  `protobuf:"varint,9,opt,name=global_rank_pop,json=globalRankPop" json:"global_rank_pop,omitempty"`
	TrophyAlert               *bool    `protobuf:"varint,11,opt,name=trophy_alert,json=trophyAlert" json:"trophy_alert,omitempty"`
	ArAlert                   *bool    `protobuf:"varint,12,opt,name=ar_alert,json=arAlert" json:"ar_alert,omitempty"`
	ContractsAlert            *bool    `protobuf:"varint,13,opt,name=contracts_alert,json=contractsAlert" json:"contracts_alert,omitempty"`
	CoopAlert                 *bool    `protobuf:"varint,14,opt,name=coop_alert,json=coopAlert" json:"coop_alert,omitempty"`
	SwitchAlert               *bool    `protobuf:"varint,15,opt,name=switch_alert,json=switchAlert" json:"switch_alert,omitempty"`
	EggOfProphecyAlert        *bool    `protobuf:"varint,16,opt,name=egg_of_prophecy_alert,json=eggOfProphecyAlert" json:"egg_of_prophecy_alert,omitempty"`
	BoostTokenAlert           *bool    `protobuf:"varint,17,opt,name=boost_token_alert,json=boostTokenAlert" json:"boost_token_alert,omitempty"`
	SoulEggAlert              *bool    `protobuf:"varint,18,opt,name=soul_egg_alert,json=soulEggAlert" json:"soul_egg_alert,omitempty"`
	BackupReminderAlert       *bool    `protobuf:"varint,19,opt,name=backup_reminder_alert,json=backupReminderAlert" json:"backup_reminder_alert,omitempty"`
}

// Default values for Backup_Misc fields.
const (
	Default_Backup_Misc_LastShareFarmValue        = float64(1e+07)
	Default_Backup_Misc_LastShareSwarmFarmValue   = float64(1e+07)
	Default_Backup_Misc_LastShareSwarmSize        = float64(140)
	Default_Backup_Misc_LastPrestigeAlertSoulEggs = uint64(45)
)

func (x *Backup_Misc) Reset() {
	*x = Backup_Misc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_Misc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Misc) ProtoMessage() {}

func (x *Backup_Misc) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Misc.ProtoReflect.Descriptor instead.
func (*Backup_Misc) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Backup_Misc) GetChickenBtnPrefBig() bool {
	if x != nil && x.ChickenBtnPrefBig != nil {
		return *x.ChickenBtnPrefBig
	}
	return false
}

func (x *Backup_Misc) GetFreeHatcheryRefillGiven() bool {
	if x != nil && x.FreeHatcheryRefillGiven != nil {
		return *x.FreeHatcheryRefillGiven
	}
	return false
}

func (x *Backup_Misc) GetLastShareFarmValue() float64 {
	if x != nil && x.LastShareFarmValue != nil {
		return *x.LastShareFarmValue
	}
	return Default_Backup_Misc_LastShareFarmValue
}

func (x *Backup_Misc) GetLastShareSwarmFarmValue() float64 {
	if x != nil && x.LastShareSwarmFarmValue != nil {
		return *x.LastShareSwarmFarmValue
	}
	return Default_Backup_Misc_LastShareSwarmFarmValue
}

func (x *Backup_Misc) GetLastShareSwarmSize() float64 {
	if x != nil && x.LastShareSwarmSize != nil {
		return *x.LastShareSwarmSize
	}
	return Default_Backup_Misc_LastShareSwarmSize
}

func (x *Backup_Misc) GetLastPrestigeAlertSoulEggs() uint64 {
	if x != nil && x.LastPrestigeAlertSoulEggs != nil {
		return *x.LastPrestigeAlertSoulEggs
	}
	return Default_Backup_Misc_LastPrestigeAlertSoulEggs
}

func (x *Backup_Misc) GetFriendRank() uint64 {
	if x != nil && x.FriendRank != nil {
		return *x.FriendRank
	}
	return 0
}

func (x *Backup_Misc) GetFriendRankPop() uint64 {
	if x != nil && x.FriendRankPop != nil {
		return *x.FriendRankPop
	}
	return 0
}

func (x *Backup_Misc) GetGlobalRank() uint64 {
	if x != nil && x.GlobalRank != nil {
		return *x.GlobalRank
	}
	return 0
}

func (x *Backup_Misc) GetGlobalRankPop() uint64 {
	if x != nil && x.GlobalRankPop != nil {
		return *x.GlobalRankPop
	}
	return 0
}

func (x *Backup_Misc) GetTrophyAlert() bool {
	if x != nil && x.TrophyAlert != nil {
		return *x.TrophyAlert
	}
	return false
}

func (x *Backup_Misc) GetArAlert() bool {
	if x != nil && x.ArAlert != nil {
		return *x.ArAlert
	}
	return false
}

func (x *Backup_Misc) GetContractsAlert() bool {
	if x != nil && x.ContractsAlert != nil {
		return *x.ContractsAlert
	}
	return false
}

func (x *Backup_Misc) GetCoopAlert() bool {
	if x != nil && x.CoopAlert != nil {
		return *x.CoopAlert
	}
	return false
}

func (x *Backup_Misc) GetSwitchAlert() bool {
	if x != nil && x.SwitchAlert != nil {
		return *x.SwitchAlert
	}
	return false
}

func (x *Backup_Misc) GetEggOfProphecyAlert() bool {
	if x != nil && x.EggOfProphecyAlert != nil {
		return *x.EggOfProphecyAlert
	}
	return false
}

func (x *Backup_Misc) GetBoostTokenAlert() bool {
	if x != nil && x.BoostTokenAlert != nil {
		return *x.BoostTokenAlert
	}
	return false
}

func (x *Backup_Misc) GetSoulEggAlert() bool {
	if x != nil && x.SoulEggAlert != nil {
		return *x.SoulEggAlert
	}
	return false
}

func (x *Backup_Misc) GetBackupReminderAlert() bool {
	if x != nil && x.BackupReminderAlert != nil {
		return *x.BackupReminderAlert
	}
	return false
}

type Backup_ResearchItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
}

func (x *Backup_ResearchItem) Reset() {
	*x = Backup_ResearchItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_ResearchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_ResearchItem) ProtoMessage() {}

func (x *Backup_ResearchItem) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_ResearchItem.ProtoReflect.Descriptor instead.
func (*Backup_ResearchItem) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Backup_ResearchItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_ResearchItem) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type Backup_NewsHeadline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Read *bool   `protobuf:"varint,2,opt,name=read" json:"read,omitempty"`
}

func (x *Backup_NewsHeadline) Reset() {
	*x = Backup_NewsHeadline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_NewsHeadline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_NewsHeadline) ProtoMessage() {}

func (x *Backup_NewsHeadline) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_NewsHeadline.ProtoReflect.Descriptor instead.
func (*Backup_NewsHeadline) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Backup_NewsHeadline) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_NewsHeadline) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

type Backup_AchievementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Achieved *bool   `protobuf:"varint,2,opt,name=achieved" json:"achieved,omitempty"`
}

func (x *Backup_AchievementInfo) Reset() {
	*x = Backup_AchievementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_AchievementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_AchievementInfo) ProtoMessage() {}

func (x *Backup_AchievementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_AchievementInfo.ProtoReflect.Descriptor instead.
func (*Backup_AchievementInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Backup_AchievementInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_AchievementInfo) GetAchieved() bool {
	if x != nil && x.Achieved != nil {
		return *x.Achieved
	}
	return false
}

type Backup_ActiveBoost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoostId        *string  `protobuf:"bytes,1,opt,name=boost_id,json=boostId" json:"boost_id,omitempty"`
	TimeRemaining  *float64 `protobuf:"fixed64,2,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
	ReferenceValue *float64 `protobuf:"fixed64,3,opt,name=reference_value,json=referenceValue" json:"reference_value,omitempty"`
}

func (x *Backup_ActiveBoost) Reset() {
	*x = Backup_ActiveBoost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_ActiveBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_ActiveBoost) ProtoMessage() {}

func (x *Backup_ActiveBoost) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_ActiveBoost.ProtoReflect.Descriptor instead.
func (*Backup_ActiveBoost) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Backup_ActiveBoost) GetBoostId() string {
	if x != nil && x.BoostId != nil {
		return *x.BoostId
	}
	return ""
}

func (x *Backup_ActiveBoost) GetTimeRemaining() float64 {
	if x != nil && x.TimeRemaining != nil {
		return *x.TimeRemaining
	}
	return 0
}

func (x *Backup_ActiveBoost) GetReferenceValue() float64 {
	if x != nil && x.ReferenceValue != nil {
		return *x.ReferenceValue
	}
	return 0
}

type Backup_OwnedBoost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoostId *string `protobuf:"bytes,1,opt,name=boost_id,json=boostId" json:"boost_id,omitempty"`
	Count   *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *Backup_OwnedBoost) Reset() {
	*x = Backup_OwnedBoost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_OwnedBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_OwnedBoost) ProtoMessage() {}

func (x *Backup_OwnedBoost) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_OwnedBoost.ProtoReflect.Descriptor instead.
func (*Backup_OwnedBoost) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Backup_OwnedBoost) GetBoostId() string {
	if x != nil && x.BoostId != nil {
		return *x.BoostId
	}
	return ""
}

func (x *Backup_OwnedBoost) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Backup_MissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Completed      *bool    `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
	ReferenceValue *float64 `protobuf:"fixed64,3,opt,name=reference_value,json=referenceValue" json:"reference_value,omitempty"`
}

func (x *Backup_MissionInfo) Reset() {
	*x = Backup_MissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_MissionInfo) ProtoMessage() {}

func (x *Backup_MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_MissionInfo.ProtoReflect.Descriptor instead.
func (*Backup_MissionInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Backup_MissionInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_MissionInfo) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

func (x *Backup_MissionInfo) GetReferenceValue() float64 {
	if x != nil && x.ReferenceValue != nil {
		return *x.ReferenceValue
	}
	return 0
}

type Contract_Goal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *GoalType   `protobuf:"varint,1,opt,name=type,enum=ei.GoalType" json:"type,omitempty"`
	TargetAmount   *float64    `protobuf:"fixed64,2,opt,name=target_amount,json=targetAmount" json:"target_amount,omitempty"`
	RewardType     *RewardType `protobuf:"varint,3,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType  *string     `protobuf:"bytes,4,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount   *float64    `protobuf:"fixed64,5,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
	TargetSoulEggs *float64    `protobuf:"fixed64,6,opt,name=target_soul_eggs,json=targetSoulEggs" json:"target_soul_eggs,omitempty"`
}

func (x *Contract_Goal) Reset() {
	*x = Contract_Goal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Goal) ProtoMessage() {}

func (x *Contract_Goal) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Goal.ProtoReflect.Descriptor instead.
func (*Contract_Goal) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Contract_Goal) GetType() GoalType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GoalType_EGGS_LAID
}

func (x *Contract_Goal) GetTargetAmount() float64 {
	if x != nil && x.TargetAmount != nil {
		return *x.TargetAmount
	}
	return 0
}

func (x *Contract_Goal) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *Contract_Goal) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *Contract_Goal) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *Contract_Goal) GetTargetSoulEggs() float64 {
	if x != nil && x.TargetSoulEggs != nil {
		return *x.TargetSoulEggs
	}
	return 0
}

type Contract_GoalSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goals []*Contract_Goal `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
}

func (x *Contract_GoalSet) Reset() {
	*x = Contract_GoalSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract_GoalSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_GoalSet) ProtoMessage() {}

func (x *Contract_GoalSet) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_GoalSet.ProtoReflect.Descriptor instead.
func (*Contract_GoalSet) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Contract_GoalSet) GetGoals() []*Contract_Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

type ContractCoopStatusResponse_ContributionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             *string          `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string          `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	ContributionAmount *float64         `protobuf:"fixed64,3,opt,name=contribution_amount,json=contributionAmount" json:"contribution_amount,omitempty"`
	ContributionRate   *float64         `protobuf:"fixed64,6,opt,name=contribution_rate,json=contributionRate" json:"contribution_rate,omitempty"`
	SoulPower          *float64         `protobuf:"fixed64,11,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	RankChange         *int32           `protobuf:"varint,8,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Active             *bool            `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	TimeCheatDetected  *bool            `protobuf:"varint,7,opt,name=time_cheat_detected,json=timeCheatDetected" json:"time_cheat_detected,omitempty"`
	Platform           *aux.Platform    `protobuf:"varint,5,opt,name=platform,enum=aux.Platform" json:"platform,omitempty"`
	PushId             *string          `protobuf:"bytes,9,opt,name=push_id,json=pushId" json:"push_id,omitempty"`
	BanVotes           *uint32          `protobuf:"varint,10,opt,name=ban_votes,json=banVotes" json:"ban_votes,omitempty"`
	BoostTokens        *uint32          `protobuf:"varint,12,opt,name=boost_tokens,json=boostTokens" json:"boost_tokens,omitempty"`
	BuffHistory        []*CoopBuffState `protobuf:"bytes,13,rep,name=buff_history,json=buffHistory" json:"buff_history,omitempty"`
}

func (x *ContractCoopStatusResponse_ContributionInfo) Reset() {
	*x = ContractCoopStatusResponse_ContributionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCoopStatusResponse_ContributionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse_ContributionInfo) ProtoMessage() {}

func (x *ContractCoopStatusResponse_ContributionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse_ContributionInfo.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse_ContributionInfo) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetContributionAmount() float64 {
	if x != nil && x.ContributionAmount != nil {
		return *x.ContributionAmount
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetContributionRate() float64 {
	if x != nil && x.ContributionRate != nil {
		return *x.ContributionRate
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetTimeCheatDetected() bool {
	if x != nil && x.TimeCheatDetected != nil {
		return *x.TimeCheatDetected
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetPlatform() aux.Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return aux.Platform_IOS
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetPushId() string {
	if x != nil && x.PushId != nil {
		return *x.PushId
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBanVotes() uint32 {
	if x != nil && x.BanVotes != nil {
		return *x.BanVotes
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBoostTokens() uint32 {
	if x != nil && x.BoostTokens != nil {
		return *x.BoostTokens
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBuffHistory() []*CoopBuffState {
	if x != nil {
		return x.BuffHistory
	}
	return nil
}

type ContractCoopStatusResponse_CoopGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   *string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName *string `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Amount   *uint32 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (x *ContractCoopStatusResponse_CoopGift) Reset() {
	*x = ContractCoopStatusResponse_CoopGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCoopStatusResponse_CoopGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse_CoopGift) ProtoMessage() {}

func (x *ContractCoopStatusResponse_CoopGift) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse_CoopGift.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse_CoopGift) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{22, 1}
}

func (x *ContractCoopStatusResponse_CoopGift) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusResponse_CoopGift) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ContractCoopStatusResponse_CoopGift) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type MissionInfo_Fuel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Egg    *Egg     `protobuf:"varint,1,opt,name=egg,enum=ei.Egg" json:"egg,omitempty"`
	Amount *float64 `protobuf:"fixed64,2,opt,name=amount" json:"amount,omitempty"`
}

func (x *MissionInfo_Fuel) Reset() {
	*x = MissionInfo_Fuel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionInfo_Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo_Fuel) ProtoMessage() {}

func (x *MissionInfo_Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo_Fuel.ProtoReflect.Descriptor instead.
func (*MissionInfo_Fuel) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{50, 0}
}

func (x *MissionInfo_Fuel) GetEgg() Egg {
	if x != nil && x.Egg != nil {
		return *x.Egg
	}
	return Egg_EDIBLE
}

func (x *MissionInfo_Fuel) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type ArtifactsConfigurationResponse_MissionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ship                *MissionInfo_Spaceship                                       `protobuf:"varint,1,opt,name=ship,enum=ei.MissionInfo_Spaceship" json:"ship,omitempty"`
	Durations           []*ArtifactsConfigurationResponse_MissionParameters_Duration `protobuf:"bytes,3,rep,name=durations" json:"durations,omitempty"`
	Capacity_DEPRECATED *uint32                                                      `protobuf:"varint,2,opt,name=capacity_DEPRECATED,json=capacityDEPRECATED" json:"capacity_DEPRECATED,omitempty"`
}

func (x *ArtifactsConfigurationResponse_MissionParameters) Reset() {
	*x = ArtifactsConfigurationResponse_MissionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse_MissionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_MissionParameters) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_MissionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_MissionParameters.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_MissionParameters) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{56, 0}
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetShip() MissionInfo_Spaceship {
	if x != nil && x.Ship != nil {
		return *x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetDurations() []*ArtifactsConfigurationResponse_MissionParameters_Duration {
	if x != nil {
		return x.Durations
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetCapacity_DEPRECATED() uint32 {
	if x != nil && x.Capacity_DEPRECATED != nil {
		return *x.Capacity_DEPRECATED
	}
	return 0
}

type ArtifactsConfigurationResponse_ArtifactParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec                *ArtifactSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	BaseQuality         *float64      `protobuf:"fixed64,2,opt,name=base_quality,json=baseQuality" json:"base_quality,omitempty"`
	OddsMultiplier      *float64      `protobuf:"fixed64,4,opt,name=odds_multiplier,json=oddsMultiplier" json:"odds_multiplier,omitempty"`
	Value               *float64      `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	CraftingPrice       *float64      `protobuf:"fixed64,5,opt,name=crafting_price,json=craftingPrice" json:"crafting_price,omitempty"`
	CraftingPriceLow    *float64      `protobuf:"fixed64,6,opt,name=crafting_price_low,json=craftingPriceLow" json:"crafting_price_low,omitempty"`
	CraftingPriceDomain *uint32       `protobuf:"varint,7,opt,name=crafting_price_domain,json=craftingPriceDomain" json:"crafting_price_domain,omitempty"`
	CraftingPriceCurve  *float64      `protobuf:"fixed64,8,opt,name=crafting_price_curve,json=craftingPriceCurve" json:"crafting_price_curve,omitempty"`
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) Reset() {
	*x = ArtifactsConfigurationResponse_ArtifactParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_ArtifactParameters) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_ArtifactParameters.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_ArtifactParameters) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{56, 1}
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetBaseQuality() float64 {
	if x != nil && x.BaseQuality != nil {
		return *x.BaseQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetOddsMultiplier() float64 {
	if x != nil && x.OddsMultiplier != nil {
		return *x.OddsMultiplier
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPrice() float64 {
	if x != nil && x.CraftingPrice != nil {
		return *x.CraftingPrice
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceLow() float64 {
	if x != nil && x.CraftingPriceLow != nil {
		return *x.CraftingPriceLow
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceDomain() uint32 {
	if x != nil && x.CraftingPriceDomain != nil {
		return *x.CraftingPriceDomain
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceCurve() float64 {
	if x != nil && x.CraftingPriceCurve != nil {
		return *x.CraftingPriceCurve
	}
	return 0
}

type ArtifactsConfigurationResponse_MissionParameters_Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationType *MissionInfo_DurationType `protobuf:"varint,1,opt,name=duration_type,json=durationType,enum=ei.MissionInfo_DurationType" json:"duration_type,omitempty"`
	Seconds      *float64                  `protobuf:"fixed64,2,opt,name=seconds" json:"seconds,omitempty"`
	Quality      *float32                  `protobuf:"fixed32,3,opt,name=quality" json:"quality,omitempty"`
	MinQuality   *float32                  `protobuf:"fixed32,4,opt,name=min_quality,json=minQuality" json:"min_quality,omitempty"`
	MaxQuality   *float32                  `protobuf:"fixed32,5,opt,name=max_quality,json=maxQuality" json:"max_quality,omitempty"`
	Capacity     *uint32                   `protobuf:"varint,6,opt,name=capacity" json:"capacity,omitempty"`
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) Reset() {
	*x = ArtifactsConfigurationResponse_MissionParameters_Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_MissionParameters_Duration) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_MissionParameters_Duration.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_MissionParameters_Duration) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{56, 0, 0}
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetDurationType() MissionInfo_DurationType {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return MissionInfo_SHORT
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetSeconds() float64 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetQuality() float32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetMinQuality() float32 {
	if x != nil && x.MinQuality != nil {
		return *x.MinQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetMaxQuality() float32 {
	if x != nil && x.MaxQuality != nil {
		return *x.MaxQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type CompleteMissionResponse_SecureArtifactSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec     *ArtifactSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	ServerId *string       `protobuf:"bytes,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
}

func (x *CompleteMissionResponse_SecureArtifactSpec) Reset() {
	*x = CompleteMissionResponse_SecureArtifactSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteMissionResponse_SecureArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMissionResponse_SecureArtifactSpec) ProtoMessage() {}

func (x *CompleteMissionResponse_SecureArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMissionResponse_SecureArtifactSpec.ProtoReflect.Descriptor instead.
func (*CompleteMissionResponse_SecureArtifactSpec) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CompleteMissionResponse_SecureArtifactSpec) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CompleteMissionResponse_SecureArtifactSpec) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

type ArtifactsDB_ActiveArtifactSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occupied *bool   `protobuf:"varint,1,opt,name=occupied" json:"occupied,omitempty"`
	ItemId   *uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (x *ArtifactsDB_ActiveArtifactSlot) Reset() {
	*x = ArtifactsDB_ActiveArtifactSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB_ActiveArtifactSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_ActiveArtifactSlot) ProtoMessage() {}

func (x *ArtifactsDB_ActiveArtifactSlot) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_ActiveArtifactSlot.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_ActiveArtifactSlot) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{66, 0}
}

func (x *ArtifactsDB_ActiveArtifactSlot) GetOccupied() bool {
	if x != nil && x.Occupied != nil {
		return *x.Occupied
	}
	return false
}

func (x *ArtifactsDB_ActiveArtifactSlot) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type ArtifactsDB_ActiveArtifactSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots []*ArtifactsDB_ActiveArtifactSlot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
}

func (x *ArtifactsDB_ActiveArtifactSet) Reset() {
	*x = ArtifactsDB_ActiveArtifactSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB_ActiveArtifactSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_ActiveArtifactSet) ProtoMessage() {}

func (x *ArtifactsDB_ActiveArtifactSet) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_ActiveArtifactSet.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_ActiveArtifactSet) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{66, 1}
}

func (x *ArtifactsDB_ActiveArtifactSet) GetSlots() []*ArtifactsDB_ActiveArtifactSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type ArtifactsDB_CraftableArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec  *ArtifactSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Seen  *bool         `protobuf:"varint,2,opt,name=seen" json:"seen,omitempty"`
	Count *uint32       `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *ArtifactsDB_CraftableArtifact) Reset() {
	*x = ArtifactsDB_CraftableArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ei_ei_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactsDB_CraftableArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_CraftableArtifact) ProtoMessage() {}

func (x *ArtifactsDB_CraftableArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_ei_ei_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_CraftableArtifact.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_CraftableArtifact) Descriptor() ([]byte, []int) {
	return file_ei_ei_proto_rawDescGZIP(), []int{66, 2}
}

func (x *ArtifactsDB_CraftableArtifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ArtifactsDB_CraftableArtifact) GetSeen() bool {
	if x != nil && x.Seen != nil {
		return *x.Seen
	}
	return false
}

func (x *ArtifactsDB_CraftableArtifact) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

var File_ei_ei_proto protoreflect.FileDescriptor

var file_ei_ei_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x69, 0x2f, 0x65, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x65,
	0x69, 0x1a, 0x10, 0x61, 0x75, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x42, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x03, 0x73,
	0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x73, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x61, 0x72, 0x6d,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x52, 0x04,
	0x6d, 0x69, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x64, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x1a, 0xf7, 0x08, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x66, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x66, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x63,
	0x68, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x74, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x42, 0x74, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f,
	0x70, 0x70, 0x61, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x70, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x64, 0x70, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x64, 0x70, 0x72, 0x41, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x64, 0x70, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x64, 0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x2f,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x79, 0x41, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1a, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xca, 0x03, 0x0a, 0x08,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x75, 0x79, 0x5f, 0x68, 0x61, 0x62, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x48, 0x61, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x68, 0x69, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x69, 0x72,
	0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x71, 0x4e, 0x75, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x54, 0x61, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70,
	0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x61, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x77,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x1a, 0x83, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73,
	0x5f, 0x4f, 0x4c, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x67, 0x67, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x73, 0x4f, 0x4c, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x65, 0x67,
	0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x6e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x31, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x61, 0x72, 0x70, 0x31, 0x55, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x38, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x61, 0x72, 0x70, 0x38, 0x55, 0x73, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x61, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x61, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x46, 0x75, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x69, 0x67,
	0x67, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x69,
	0x67, 0x67, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x6f, 0x73, 0x74, 0x50,
	0x69, 0x67, 0x67, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8a,
	0x0e, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x67, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x45, 0x67, 0x67, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x67, 0x6f, 0x6c, 0x64,
	0x65, 0x6e, 0x45, 0x67, 0x67, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45,
	0x67, 0x67, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x6c,
	0x69, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65, 0x67, 0x67,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x75, 0x6e, 0x63, 0x6c, 0x69, 0x61, 0x6d,
	0x65, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45, 0x67, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x44, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x6e, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73,
	0x5f, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x44, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x67, 0x67, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x67, 0x67, 0x73, 0x4f, 0x66, 0x50, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x67, 0x67, 0x73, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x43, 0x61, 0x73, 0x68, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x73, 0x68, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x73, 0x68, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x33, 0x0a, 0x16, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x65, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x72, 0x6d, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x67, 0x67,
	0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x65, 0x67, 0x67, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x47,
	0x0a, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x88, 0x05, 0x0a, 0x09,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x65,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x73, 0x70,
	0x65, 0x63, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x11, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45,
	0x67, 0x67, 0x52, 0x0f, 0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x67, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x67, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x67, 0x67,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x65, 0x67, 0x67, 0x73, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x19,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x03, 0x30, 0x2e, 0x35, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x0f, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x66, 0x75,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10,
	0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x6e,
	0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x65, 0x6c, 0x65, 0x64, 0x53, 0x68,
	0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x1a, 0x9b, 0x0a, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67,
	0x52, 0x07, 0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65,
	0x69, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x68,
	0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68,
	0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75,
	0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65,
	0x6e, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x68,
	0x69, 0x63, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6c, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x65, 0x67, 0x67, 0x73, 0x4c, 0x61, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x67,
	0x67, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x65, 0x67, 0x67, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x67, 0x67, 0x73, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x62, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x04, 0x68, 0x61, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x62, 0x5f, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d,
	0x68, 0x61, 0x62, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x68, 0x61, 0x62, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x68,
	0x61, 0x62, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x63, 0x75, 0x62,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x01, 0x52, 0x17, 0x68, 0x61, 0x62, 0x49, 0x6e, 0x63, 0x75, 0x62,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x13, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x68, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x64,
	0x65, 0x62, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x44, 0x65, 0x62, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xba, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xeb, 0x06, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68,
	0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x62,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65,
	0x6e, 0x42, 0x74, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x42, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x66, 0x72, 0x65, 0x65, 0x48, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x08, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x08, 0x31, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x77, 0x61, 0x72, 0x6d, 0x46, 0x61, 0x72, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x31, 0x34,
	0x30, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x77, 0x61, 0x72,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x02, 0x34, 0x35,
	0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x50, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6f, 0x70, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x67, 0x67, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x67, 0x67, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x70,
	0x68, 0x65, 0x63, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67,
	0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x1a,
	0x34, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x32, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x73, 0x48, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x1a, 0x78, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x3d, 0x0a, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x64, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x19, 0x45, 0x67, 0x67, 0x49,
	0x6e, 0x63, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x75, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb1, 0x02,
	0x0a, 0x1a, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x61,
	0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10,
	0x03, 0x22, 0x4b, 0x0a, 0x0e, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x41, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x75, 0x78, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5f,
	0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x12, 0x2d, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x22,
	0xbb, 0x02, 0x0a, 0x10, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01,
	0x0a, 0x0c, 0x49, 0x41, 0x50, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x09,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x49, 0x41,
	0x50, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e,
	0x0a, 0x13, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x49, 0x6e,
	0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd2,
	0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x70,
	0x75, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x70, 0x75, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x75,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x70,
	0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x8f, 0x09, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x67, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x67, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x70,
	0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x69, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x45, 0x6c,
	0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x75, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x67, 0x67, 0x6c, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67,
	0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x6c, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x67, 0x67, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x70, 0x55, 0x73, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x57, 0x61, 0x72,
	0x70, 0x55, 0x73, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x6b, 0x75, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x23, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6c, 0x6f, 0x67, 0x22, 0x4e, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x06,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x03, 0x65, 0x67, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e,
	0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x52, 0x03, 0x65, 0x67, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x08, 0x67,
	0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x70, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x11, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x36, 0x30, 0x52, 0x0f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x1a, 0xf5, 0x01, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65,
	0x69, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x1a, 0x32, 0x0a,
	0x07, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c,
	0x73, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x56, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa8, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x65, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04, 0x31, 0x30,
	0x30, 0x30, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x45, 0x6f, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f,
	0x09, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43,
	0x0a, 0x1e, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x47, 0x69, 0x66, 0x74, 0x52, 0x05, 0x67, 0x69, 0x66,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xe8, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x61, 0x75, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x34, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6f, 0x70,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x58, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x70, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x92, 0x05, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x6f, 0x70, 0x5f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6f,
	0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x6f, 0x6f, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x63, 0x6f,
	0x6f, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f,
	0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57,
	0x68, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0b, 0x4d, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x52, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x22, 0x85, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x75, 0x78,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x75, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0xde, 0x02, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x75, 0x78, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x10,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x47,
	0x69, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x15, 0x4b, 0x69, 0x63, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x65,
	0x61, 0x74, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x11,
	0x65, 0x67, 0x67, 0x4c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x26, 0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x0c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x75, 0x66, 0x66, 0x22, 0x40, 0x0a, 0x20, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6f, 0x70, 0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x0d, 0x65, 0x67, 0x67, 0x4c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x3e, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x70, 0x42, 0x75, 0x66, 0x66, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6f, 0x70,
	0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x13,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67,
	0x67, 0x49, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x05, 0x67,
	0x69, 0x66, 0x74, 0x73, 0x22, 0x9f, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x41, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x04, 0x0a, 0x11, 0x41, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x65,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0xe5, 0x06, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x52, 0x04, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x1a, 0x39, 0x0a, 0x04, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x03, 0x65, 0x67,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67,
	0x52, 0x03, 0x65, 0x67, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01,
	0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49,
	0x4c, 0x4c, 0x45, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x52, 0x45, 0x4c, 0x4c, 0x49, 0x48, 0x45, 0x4e, 0x5f,
	0x43, 0x4f, 0x52, 0x56, 0x45, 0x54, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41,
	0x4c, 0x45, 0x47, 0x47, 0x54, 0x49, 0x43, 0x41, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48,
	0x49, 0x43, 0x4b, 0x46, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x4f,
	0x59, 0x45, 0x47, 0x47, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x4e, 0x45,
	0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x09, 0x22, 0x74, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x41,
	0x55, 0x4e, 0x43, 0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45,
	0x44, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x49, 0x4e, 0x47,
	0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x14,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x19, 0x22, 0x3b,
	0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x8a, 0x0c, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x03, 0x65, 0x67, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x52, 0x03, 0x65, 0x67,
	0x67, 0x22, 0x8a, 0x09, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x55,
	0x4e, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x45, 0x4f, 0x44, 0x59, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x4c, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x41, 0x4b, 0x5f, 0x4f, 0x46, 0x5f,
	0x4d, 0x49, 0x44, 0x41, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x47, 0x47, 0x45, 0x4e, 0x44, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x45, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4e, 0x45, 0x43, 0x4b, 0x4c,
	0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x55, 0x53, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x09,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x41, 0x53, 0x41,
	0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x4f, 0x45, 0x4e, 0x49, 0x58, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x55, 0x4e, 0x47,
	0x53, 0x54, 0x45, 0x4e, 0x5f, 0x41, 0x4e, 0x4b, 0x48, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x55, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x4f, 0x43, 0x48, 0x10, 0x15,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x53,
	0x54, 0x49, 0x43, 0x4b, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45,
	0x5f, 0x43, 0x55, 0x42, 0x45, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x45, 0x10, 0x18, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x5f, 0x42, 0x4f, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x53, 0x53, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49,
	0x55, 0x4d, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x43, 0x4c, 0x45, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x49, 0x54, 0x41, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x55, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x52, 0x43, 0x55, 0x52, 0x59, 0x53, 0x5f,
	0x4c, 0x45, 0x4e, 0x53, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x4c,
	0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x1f, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x20, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x55, 0x4e, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x21,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x22,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f,
	0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x52, 0x41,
	0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x46, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x41, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x54, 0x45, 0x52, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x41, 0x4c, 0x55, 0x4d, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x0e,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x53, 0x10,
	0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x49, 0x45, 0x4e, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x10,
	0x10, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x4f, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x55, 0x5f, 0x43, 0x45, 0x54,
	0x49, 0x5f, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4e,
	0x54, 0x41, 0x55, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x45, 0x4c, 0x10, 0x13, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x52, 0x49, 0x44, 0x41, 0x4e, 0x49, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x53, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x45, 0x53, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x41, 0x4c, 0x41, 0x4e, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x2a, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x41, 0x4e, 0x49, 0x55, 0x4d, 0x10,
	0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x55, 0x4e, 0x41, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2e, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x50,
	0x48, 0x45, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d,
	0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x31, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x52, 0x52, 0x41, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x49, 0x46, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x34,
	0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x90, 0x4e, 0x22, 0x48,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x45, 0x52,
	0x49, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x50, 0x49, 0x43,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10,
	0x03, 0x22, 0x45, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52,
	0x45, 0x44, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x62, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a,
	0x15, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0d, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x72, 0x0a, 0x1d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x07, 0x0a, 0x1e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x13,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xb2, 0x03, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x04, 0x73, 0x68, 0x69, 0x70, 0x12, 0x5b, 0x0a, 0x09, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65,
	0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x1a, 0xdf, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x69,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0xd7, 0x02, 0x0a, 0x12, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x64, 0x64,
	0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x6f, 0x64, 0x64, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x61, 0x66,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x0f,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xce,
	0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x57, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x84, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x61, 0x66, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x4e, 0x52, 0x0e, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x62, 0x79, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65,
	0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x64,
	0x22, 0x77, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65,
	0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x07, 0x0a, 0x0b, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x43, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x38, 0x0a,
	0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x1a, 0x49, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x1a, 0x4d, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x1a, 0x63, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x19,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12,
	0x2d, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x72,
	0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72,
	0x65, 0x73, 0x22, 0x78, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2c, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x2d, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x15,
	0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x16, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0d, 0x74, 0x6f, 0x5f, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x45, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x8a, 0x02, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22,
	0x6c, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x41, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x22, 0x6b, 0x0a,
	0x13, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x12, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x54, 0x6f, 0x4b, 0x65, 0x65, 0x70,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x2a, 0xee, 0x02, 0x0a, 0x03, 0x45,
	0x67, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x55, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x55, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x4d, 0x4f,
	0x52, 0x54, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x41, 0x43,
	0x48, 0x59, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54,
	0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55,
	0x4d, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x44, 0x49, 0x47, 0x59, 0x10, 0x0c,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x0d, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0f,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x49, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x42, 0x55,
	0x4c, 0x41, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41,
	0x54, 0x45, 0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x54, 0x45, 0x52, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e,
	0x10, 0x66, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x67,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x4d, 0x50, 0x4b, 0x49, 0x4e, 0x10, 0x68, 0x12, 0x0c, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe8, 0x07, 0x2a, 0x2d, 0x0a, 0x08, 0x46,
	0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x2b, 0x0a, 0x08, 0x47, 0x6f,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x47, 0x47, 0x53, 0x5f, 0x4c,
	0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x64, 0x2a, 0xc9, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x48, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f,
	0x55, 0x4c, 0x5f, 0x45, 0x47, 0x47, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x47,
	0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x50, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x49, 0x47, 0x47, 0x59,
	0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x47, 0x47, 0x59,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x49, 0x47, 0x47, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x55, 0x4d,
	0x50, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0a, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x64, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x63, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x65,
	0x72, 0x2f, 0x45, 0x67, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x2f, 0x65,
	0x69,
}

var (
	file_ei_ei_proto_rawDescOnce sync.Once
	file_ei_ei_proto_rawDescData = file_ei_ei_proto_rawDesc
)

func file_ei_ei_proto_rawDescGZIP() []byte {
	file_ei_ei_proto_rawDescOnce.Do(func() {
		file_ei_ei_proto_rawDescData = protoimpl.X.CompressGZIP(file_ei_ei_proto_rawDescData)
	})
	return file_ei_ei_proto_rawDescData
}

var file_ei_ei_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_ei_ei_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_ei_ei_proto_goTypes = []interface{}{
	(Egg)(0),        // 0: ei.Egg
	(FarmType)(0),   // 1: ei.FarmType
	(GoalType)(0),   // 2: ei.GoalType
	(RewardType)(0), // 3: ei.RewardType
	(EggIncFirstContactResponse_ErrorCodes)(0),                // 4: ei.EggIncFirstContactResponse.ErrorCodes
	(MissionInfo_Spaceship)(0),                                // 5: ei.MissionInfo.Spaceship
	(MissionInfo_Status)(0),                                   // 6: ei.MissionInfo.Status
	(MissionInfo_DurationType)(0),                             // 7: ei.MissionInfo.DurationType
	(ArtifactSpec_Name)(0),                                    // 8: ei.ArtifactSpec.Name
	(ArtifactSpec_Level)(0),                                   // 9: ei.ArtifactSpec.Level
	(ArtifactSpec_Rarity)(0),                                  // 10: ei.ArtifactSpec.Rarity
	(ArtifactSpec_Type)(0),                                    // 11: ei.ArtifactSpec.Type
	(SaveBackupResponse_ErrorCodes)(0),                        // 12: ei.SaveBackupResponse.ErrorCodes
	(*Backup)(nil),                                            // 13: ei.Backup
	(*EggIncFirstContactRequest)(nil),                         // 14: ei.EggIncFirstContactRequest
	(*EggIncFirstContactResponse)(nil),                        // 15: ei.EggIncFirstContactResponse
	(*EggIncAdConfig)(nil),                                    // 16: ei.EggIncAdConfig
	(*DailyGiftInfo)(nil),                                     // 17: ei.DailyGiftInfo
	(*SalesInfoRequest)(nil),                                  // 18: ei.SalesInfoRequest
	(*IAPSaleEntry)(nil),                                      // 19: ei.IAPSaleEntry
	(*SalesInfo)(nil),                                         // 20: ei.SalesInfo
	(*EggIncEvent)(nil),                                       // 21: ei.EggIncEvent
	(*EggIncCurrentEvents)(nil),                               // 22: ei.EggIncCurrentEvents
	(*DeviceInfo)(nil),                                        // 23: ei.DeviceInfo
	(*AppInfo)(nil),                                           // 24: ei.AppInfo
	(*ActionKeyValuePair)(nil),                                // 25: ei.ActionKeyValuePair
	(*GenericAction)(nil),                                     // 26: ei.GenericAction
	(*VerifyPurchaseRequest)(nil),                             // 27: ei.VerifyPurchaseRequest
	(*VerifyPurchaseResponse)(nil),                            // 28: ei.VerifyPurchaseResponse
	(*Reward)(nil),                                            // 29: ei.Reward
	(*Contract)(nil),                                          // 30: ei.Contract
	(*BasicRequestInfo)(nil),                                  // 31: ei.BasicRequestInfo
	(*ContractsRequest)(nil),                                  // 32: ei.ContractsRequest
	(*ContractsResponse)(nil),                                 // 33: ei.ContractsResponse
	(*ContractCoopStatusRequest)(nil),                         // 34: ei.ContractCoopStatusRequest
	(*ContractCoopStatusResponse)(nil),                        // 35: ei.ContractCoopStatusResponse
	(*LocalContract)(nil),                                     // 36: ei.LocalContract
	(*MyContracts)(nil),                                       // 37: ei.MyContracts
	(*QueryCoopRequest)(nil),                                  // 38: ei.QueryCoopRequest
	(*QueryCoopResponse)(nil),                                 // 39: ei.QueryCoopResponse
	(*CreateCoopRequest)(nil),                                 // 40: ei.CreateCoopRequest
	(*CreateCoopResponse)(nil),                                // 41: ei.CreateCoopResponse
	(*JoinCoopRequest)(nil),                                   // 42: ei.JoinCoopRequest
	(*JoinCoopResponse)(nil),                                  // 43: ei.JoinCoopResponse
	(*AutoJoinCoopRequest)(nil),                               // 44: ei.AutoJoinCoopRequest
	(*UpdateCoopPermissionsRequest)(nil),                      // 45: ei.UpdateCoopPermissionsRequest
	(*UpdateCoopPermissionsResponse)(nil),                     // 46: ei.UpdateCoopPermissionsResponse
	(*LeaveCoopRequest)(nil),                                  // 47: ei.LeaveCoopRequest
	(*GiftPlayerCoopRequest)(nil),                             // 48: ei.GiftPlayerCoopRequest
	(*KickPlayerCoopRequest)(nil),                             // 49: ei.KickPlayerCoopRequest
	(*ContractCoopStatusUpdateRequest)(nil),                   // 50: ei.ContractCoopStatusUpdateRequest
	(*ContractCoopStatusUpdateResponse)(nil),                  // 51: ei.ContractCoopStatusUpdateResponse
	(*CoopBuffState)(nil),                                     // 52: ei.CoopBuffState
	(*CoopBuffHistory)(nil),                                   // 53: ei.CoopBuffHistory
	(*UserDataInfoRequest)(nil),                               // 54: ei.UserDataInfoRequest
	(*UserDataInfoResponse)(nil),                              // 55: ei.UserDataInfoResponse
	(*ClearAllUserDataRequest)(nil),                           // 56: ei.ClearAllUserDataRequest
	(*ServerGift)(nil),                                        // 57: ei.ServerGift
	(*PeriodicalsResponse)(nil),                               // 58: ei.PeriodicalsResponse
	(*GetPeriodicalsRequest)(nil),                             // 59: ei.GetPeriodicalsRequest
	(*AdAttributionRawData)(nil),                              // 60: ei.AdAttributionRawData
	(*AdAttributionRow)(nil),                                  // 61: ei.AdAttributionRow
	(*AdAttributionInfo)(nil),                                 // 62: ei.AdAttributionInfo
	(*MissionInfo)(nil),                                       // 63: ei.MissionInfo
	(*ArtifactSpec)(nil),                                      // 64: ei.ArtifactSpec
	(*CompleteArtifact)(nil),                                  // 65: ei.CompleteArtifact
	(*ArtifactInventoryItem)(nil),                             // 66: ei.ArtifactInventoryItem
	(*InventorySlot)(nil),                                     // 67: ei.InventorySlot
	(*ArtifactsConfigurationRequest)(nil),                     // 68: ei.ArtifactsConfigurationRequest
	(*ArtifactsConfigurationResponse)(nil),                    // 69: ei.ArtifactsConfigurationResponse
	(*MissionRequest)(nil),                                    // 70: ei.MissionRequest
	(*MissionResponse)(nil),                                   // 71: ei.MissionResponse
	(*CompleteMissionResponse)(nil),                           // 72: ei.CompleteMissionResponse
	(*CraftArtifactRequest)(nil),                              // 73: ei.CraftArtifactRequest
	(*CraftArtifactResponse)(nil),                             // 74: ei.CraftArtifactResponse
	(*ConsumeArtifactRequest)(nil),                            // 75: ei.ConsumeArtifactRequest
	(*ConsumeArtifactResponse)(nil),                           // 76: ei.ConsumeArtifactResponse
	(*SetArtifactRequest)(nil),                                // 77: ei.SetArtifactRequest
	(*SetArtifactResponse)(nil),                               // 78: ei.SetArtifactResponse
	(*ArtifactsDB)(nil),                                       // 79: ei.ArtifactsDB
	(*AuthenticatedMessage)(nil),                              // 80: ei.AuthenticatedMessage
	(*LogCompleteMissionPayload)(nil),                         // 81: ei.LogCompleteMissionPayload
	(*LogCraftArtifactPayload)(nil),                           // 82: ei.LogCraftArtifactPayload
	(*LogConsumeArtifactPayload)(nil),                         // 83: ei.LogConsumeArtifactPayload
	(*LogSetArtifactPayload)(nil),                             // 84: ei.LogSetArtifactPayload
	(*AccountTransferPayload)(nil),                            // 85: ei.AccountTransferPayload
	(*SaveBackupResponse)(nil),                                // 86: ei.SaveBackupResponse
	(*CleanAccountRequest)(nil),                               // 87: ei.CleanAccountRequest
	(*Backup_Settings)(nil),                                   // 88: ei.Backup.Settings
	(*Backup_Tutorial)(nil),                                   // 89: ei.Backup.Tutorial
	(*Backup_Stats)(nil),                                      // 90: ei.Backup.Stats
	(*Backup_Game)(nil),                                       // 91: ei.Backup.Game
	(*Backup_Artifacts)(nil),                                  // 92: ei.Backup.Artifacts
	(*Backup_Simulation)(nil),                                 // 93: ei.Backup.Simulation
	(*Backup_Mission)(nil),                                    // 94: ei.Backup.Mission
	(*Backup_Misc)(nil),                                       // 95: ei.Backup.Misc
	(*Backup_ResearchItem)(nil),                               // 96: ei.Backup.ResearchItem
	(*Backup_NewsHeadline)(nil),                               // 97: ei.Backup.NewsHeadline
	(*Backup_AchievementInfo)(nil),                            // 98: ei.Backup.AchievementInfo
	(*Backup_ActiveBoost)(nil),                                // 99: ei.Backup.ActiveBoost
	(*Backup_OwnedBoost)(nil),                                 // 100: ei.Backup.OwnedBoost
	(*Backup_MissionInfo)(nil),                                // 101: ei.Backup.MissionInfo
	(*Contract_Goal)(nil),                                     // 102: ei.Contract.Goal
	(*Contract_GoalSet)(nil),                                  // 103: ei.Contract.GoalSet
	(*ContractCoopStatusResponse_ContributionInfo)(nil),       // 104: ei.ContractCoopStatusResponse.ContributionInfo
	(*ContractCoopStatusResponse_CoopGift)(nil),               // 105: ei.ContractCoopStatusResponse.CoopGift
	(*MissionInfo_Fuel)(nil),                                  // 106: ei.MissionInfo.Fuel
	(*ArtifactsConfigurationResponse_MissionParameters)(nil),  // 107: ei.ArtifactsConfigurationResponse.MissionParameters
	(*ArtifactsConfigurationResponse_ArtifactParameters)(nil), // 108: ei.ArtifactsConfigurationResponse.ArtifactParameters
	(*ArtifactsConfigurationResponse_MissionParameters_Duration)(nil), // 109: ei.ArtifactsConfigurationResponse.MissionParameters.Duration
	(*CompleteMissionResponse_SecureArtifactSpec)(nil),                // 110: ei.CompleteMissionResponse.SecureArtifactSpec
	(*ArtifactsDB_ActiveArtifactSlot)(nil),                            // 111: ei.ArtifactsDB.ActiveArtifactSlot
	(*ArtifactsDB_ActiveArtifactSet)(nil),                             // 112: ei.ArtifactsDB.ActiveArtifactSet
	(*ArtifactsDB_CraftableArtifact)(nil),                             // 113: ei.ArtifactsDB.CraftableArtifact
	(aux.Platform)(0),                                                 // 114: aux.Platform
	(aux.AdNetwork)(0),                                                // 115: aux.AdNetwork
}
var file_ei_ei_proto_depIdxs = []int32{
	88,  // 0: ei.Backup.settings:type_name -> ei.Backup.Settings
	89,  // 1: ei.Backup.tutorial:type_name -> ei.Backup.Tutorial
	90,  // 2: ei.Backup.stats:type_name -> ei.Backup.Stats
	91,  // 3: ei.Backup.game:type_name -> ei.Backup.Game
	92,  // 4: ei.Backup.artifacts:type_name -> ei.Backup.Artifacts
	93,  // 5: ei.Backup.sim:type_name -> ei.Backup.Simulation
	93,  // 6: ei.Backup.farms:type_name -> ei.Backup.Simulation
	94,  // 7: ei.Backup.mission:type_name -> ei.Backup.Mission
	95,  // 8: ei.Backup.misc:type_name -> ei.Backup.Misc
	37,  // 9: ei.Backup.contracts:type_name -> ei.MyContracts
	79,  // 10: ei.Backup.artifacts_db:type_name -> ei.ArtifactsDB
	31,  // 11: ei.EggIncFirstContactRequest.rinfo:type_name -> ei.BasicRequestInfo
	114, // 12: ei.EggIncFirstContactRequest.platform:type_name -> aux.Platform
	13,  // 13: ei.EggIncFirstContactResponse.backup:type_name -> ei.Backup
	115, // 14: ei.EggIncAdConfig.network_priority:type_name -> aux.AdNetwork
	19,  // 15: ei.SalesInfo.sales:type_name -> ei.IAPSaleEntry
	21,  // 16: ei.EggIncCurrentEvents.events:type_name -> ei.EggIncEvent
	25,  // 17: ei.GenericAction.data:type_name -> ei.ActionKeyValuePair
	24,  // 18: ei.GenericAction.app:type_name -> ei.AppInfo
	23,  // 19: ei.GenericAction.device:type_name -> ei.DeviceInfo
	31,  // 20: ei.VerifyPurchaseRequest.rinfo:type_name -> ei.BasicRequestInfo
	26,  // 21: ei.VerifyPurchaseRequest.log:type_name -> ei.GenericAction
	3,   // 22: ei.Reward.reward_type:type_name -> ei.RewardType
	0,   // 23: ei.Contract.egg:type_name -> ei.Egg
	102, // 24: ei.Contract.goals:type_name -> ei.Contract.Goal
	103, // 25: ei.Contract.goal_sets:type_name -> ei.Contract.GoalSet
	30,  // 26: ei.ContractsResponse.contracts:type_name -> ei.Contract
	31,  // 27: ei.ContractCoopStatusRequest.rinfo:type_name -> ei.BasicRequestInfo
	104, // 28: ei.ContractCoopStatusResponse.contributors:type_name -> ei.ContractCoopStatusResponse.ContributionInfo
	105, // 29: ei.ContractCoopStatusResponse.gifts:type_name -> ei.ContractCoopStatusResponse.CoopGift
	30,  // 30: ei.LocalContract.contract:type_name -> ei.Contract
	36,  // 31: ei.MyContracts.contracts:type_name -> ei.LocalContract
	36,  // 32: ei.MyContracts.archive:type_name -> ei.LocalContract
	35,  // 33: ei.MyContracts.current_coop_statuses:type_name -> ei.ContractCoopStatusResponse
	31,  // 34: ei.QueryCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	31,  // 35: ei.CreateCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	114, // 36: ei.CreateCoopRequest.platform:type_name -> aux.Platform
	31,  // 37: ei.JoinCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	114, // 38: ei.JoinCoopRequest.platform:type_name -> aux.Platform
	31,  // 39: ei.AutoJoinCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	114, // 40: ei.AutoJoinCoopRequest.platform:type_name -> aux.Platform
	31,  // 41: ei.UpdateCoopPermissionsRequest.rinfo:type_name -> ei.BasicRequestInfo
	31,  // 42: ei.LeaveCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	31,  // 43: ei.GiftPlayerCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	31,  // 44: ei.KickPlayerCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	31,  // 45: ei.ContractCoopStatusUpdateRequest.rinfo:type_name -> ei.BasicRequestInfo
	52,  // 46: ei.CoopBuffHistory.history:type_name -> ei.CoopBuffState
	31,  // 47: ei.UserDataInfoRequest.rinfo:type_name -> ei.BasicRequestInfo
	31,  // 48: ei.ClearAllUserDataRequest.rinfo:type_name -> ei.BasicRequestInfo
	3,   // 49: ei.ServerGift.reward_type:type_name -> ei.RewardType
	20,  // 50: ei.PeriodicalsResponse.sales:type_name -> ei.SalesInfo
	22,  // 51: ei.PeriodicalsResponse.events:type_name -> ei.EggIncCurrentEvents
	33,  // 52: ei.PeriodicalsResponse.contracts:type_name -> ei.ContractsResponse
	57,  // 53: ei.PeriodicalsResponse.gifts:type_name -> ei.ServerGift
	31,  // 54: ei.GetPeriodicalsRequest.rinfo:type_name -> ei.BasicRequestInfo
	5,   // 55: ei.MissionInfo.ship:type_name -> ei.MissionInfo.Spaceship
	6,   // 56: ei.MissionInfo.status:type_name -> ei.MissionInfo.Status
	7,   // 57: ei.MissionInfo.duration_type:type_name -> ei.MissionInfo.DurationType
	106, // 58: ei.MissionInfo.fuel:type_name -> ei.MissionInfo.Fuel
	8,   // 59: ei.ArtifactSpec.name:type_name -> ei.ArtifactSpec.Name
	9,   // 60: ei.ArtifactSpec.level:type_name -> ei.ArtifactSpec.Level
	10,  // 61: ei.ArtifactSpec.rarity:type_name -> ei.ArtifactSpec.Rarity
	0,   // 62: ei.ArtifactSpec.egg:type_name -> ei.Egg
	64,  // 63: ei.CompleteArtifact.spec:type_name -> ei.ArtifactSpec
	64,  // 64: ei.CompleteArtifact.stones:type_name -> ei.ArtifactSpec
	65,  // 65: ei.ArtifactInventoryItem.artifact:type_name -> ei.CompleteArtifact
	31,  // 66: ei.ArtifactsConfigurationRequest.rinfo:type_name -> ei.BasicRequestInfo
	107, // 67: ei.ArtifactsConfigurationResponse.mission_parameters:type_name -> ei.ArtifactsConfigurationResponse.MissionParameters
	108, // 68: ei.ArtifactsConfigurationResponse.artifact_parameters:type_name -> ei.ArtifactsConfigurationResponse.ArtifactParameters
	31,  // 69: ei.MissionRequest.rinfo:type_name -> ei.BasicRequestInfo
	63,  // 70: ei.MissionRequest.info:type_name -> ei.MissionInfo
	63,  // 71: ei.MissionResponse.info:type_name -> ei.MissionInfo
	63,  // 72: ei.CompleteMissionResponse.info:type_name -> ei.MissionInfo
	110, // 73: ei.CompleteMissionResponse.artifacts:type_name -> ei.CompleteMissionResponse.SecureArtifactSpec
	29,  // 74: ei.CompleteMissionResponse.other_rewards:type_name -> ei.Reward
	31,  // 75: ei.CraftArtifactRequest.rinfo:type_name -> ei.BasicRequestInfo
	64,  // 76: ei.CraftArtifactRequest.spec:type_name -> ei.ArtifactSpec
	66,  // 77: ei.CraftArtifactRequest.ingredients:type_name -> ei.ArtifactInventoryItem
	10,  // 78: ei.CraftArtifactResponse.rarity_achieved:type_name -> ei.ArtifactSpec.Rarity
	31,  // 79: ei.ConsumeArtifactRequest.rinfo:type_name -> ei.BasicRequestInfo
	64,  // 80: ei.ConsumeArtifactRequest.spec:type_name -> ei.ArtifactSpec
	64,  // 81: ei.ConsumeArtifactResponse.byproducts:type_name -> ei.ArtifactSpec
	29,  // 82: ei.ConsumeArtifactResponse.other_rewards:type_name -> ei.Reward
	31,  // 83: ei.SetArtifactRequest.rinfo:type_name -> ei.BasicRequestInfo
	66,  // 84: ei.SetArtifactRequest.artifact:type_name -> ei.ArtifactInventoryItem
	64,  // 85: ei.SetArtifactRequest.stones:type_name -> ei.ArtifactSpec
	66,  // 86: ei.ArtifactsDB.inventory_items:type_name -> ei.ArtifactInventoryItem
	67,  // 87: ei.ArtifactsDB.inventory_slots:type_name -> ei.InventorySlot
	111, // 88: ei.ArtifactsDB.active_artifacts:type_name -> ei.ArtifactsDB.ActiveArtifactSlot
	112, // 89: ei.ArtifactsDB.active_artifact_sets:type_name -> ei.ArtifactsDB.ActiveArtifactSet
	64,  // 90: ei.ArtifactsDB.discovered_artifacts:type_name -> ei.ArtifactSpec
	113, // 91: ei.ArtifactsDB.craftable_artifacts:type_name -> ei.ArtifactsDB.CraftableArtifact
	113, // 92: ei.ArtifactsDB.crafting_counts:type_name -> ei.ArtifactsDB.CraftableArtifact
	63,  // 93: ei.ArtifactsDB.mission_infos:type_name -> ei.MissionInfo
	63,  // 94: ei.ArtifactsDB.mission_archive:type_name -> ei.MissionInfo
	70,  // 95: ei.LogCompleteMissionPayload.req:type_name -> ei.MissionRequest
	72,  // 96: ei.LogCompleteMissionPayload.res:type_name -> ei.CompleteMissionResponse
	73,  // 97: ei.LogCraftArtifactPayload.req:type_name -> ei.CraftArtifactRequest
	74,  // 98: ei.LogCraftArtifactPayload.res:type_name -> ei.CraftArtifactResponse
	75,  // 99: ei.LogConsumeArtifactPayload.req:type_name -> ei.ConsumeArtifactRequest
	76,  // 100: ei.LogConsumeArtifactPayload.res:type_name -> ei.ConsumeArtifactResponse
	77,  // 101: ei.LogSetArtifactPayload.req:type_name -> ei.SetArtifactRequest
	78,  // 102: ei.LogSetArtifactPayload.res:type_name -> ei.SetArtifactResponse
	13,  // 103: ei.SaveBackupResponse.existing_backup:type_name -> ei.Backup
	0,   // 104: ei.Backup.Game.max_egg_reached:type_name -> ei.Egg
	96,  // 105: ei.Backup.Game.epic_research:type_name -> ei.Backup.ResearchItem
	97,  // 106: ei.Backup.Game.news:type_name -> ei.Backup.NewsHeadline
	98,  // 107: ei.Backup.Game.achievements:type_name -> ei.Backup.AchievementInfo
	100, // 108: ei.Backup.Game.boosts:type_name -> ei.Backup.OwnedBoost
	66,  // 109: ei.Backup.Artifacts.item_being_infused:type_name -> ei.ArtifactInventoryItem
	64,  // 110: ei.Backup.Artifacts.spec_being_infused:type_name -> ei.ArtifactSpec
	0,   // 111: ei.Backup.Artifacts.egg_type_infusing:type_name -> ei.Egg
	5,   // 112: ei.Backup.Artifacts.last_fueled_ship:type_name -> ei.MissionInfo.Spaceship
	0,   // 113: ei.Backup.Simulation.egg_type:type_name -> ei.Egg
	1,   // 114: ei.Backup.Simulation.farm_type:type_name -> ei.FarmType
	96,  // 115: ei.Backup.Simulation.common_research:type_name -> ei.Backup.ResearchItem
	99,  // 116: ei.Backup.Simulation.active_boosts:type_name -> ei.Backup.ActiveBoost
	101, // 117: ei.Backup.Mission.missions:type_name -> ei.Backup.MissionInfo
	2,   // 118: ei.Contract.Goal.type:type_name -> ei.GoalType
	3,   // 119: ei.Contract.Goal.reward_type:type_name -> ei.RewardType
	102, // 120: ei.Contract.GoalSet.goals:type_name -> ei.Contract.Goal
	114, // 121: ei.ContractCoopStatusResponse.ContributionInfo.platform:type_name -> aux.Platform
	52,  // 122: ei.ContractCoopStatusResponse.ContributionInfo.buff_history:type_name -> ei.CoopBuffState
	0,   // 123: ei.MissionInfo.Fuel.egg:type_name -> ei.Egg
	5,   // 124: ei.ArtifactsConfigurationResponse.MissionParameters.ship:type_name -> ei.MissionInfo.Spaceship
	109, // 125: ei.ArtifactsConfigurationResponse.MissionParameters.durations:type_name -> ei.ArtifactsConfigurationResponse.MissionParameters.Duration
	64,  // 126: ei.ArtifactsConfigurationResponse.ArtifactParameters.spec:type_name -> ei.ArtifactSpec
	7,   // 127: ei.ArtifactsConfigurationResponse.MissionParameters.Duration.duration_type:type_name -> ei.MissionInfo.DurationType
	64,  // 128: ei.CompleteMissionResponse.SecureArtifactSpec.spec:type_name -> ei.ArtifactSpec
	111, // 129: ei.ArtifactsDB.ActiveArtifactSet.slots:type_name -> ei.ArtifactsDB.ActiveArtifactSlot
	64,  // 130: ei.ArtifactsDB.CraftableArtifact.spec:type_name -> ei.ArtifactSpec
	131, // [131:131] is the sub-list for method output_type
	131, // [131:131] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_ei_ei_proto_init() }
func file_ei_ei_proto_init() {
	if File_ei_ei_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ei_ei_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggIncFirstContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggIncFirstContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggIncAdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyGiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IAPSaleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggIncEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggIncCurrentEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionKeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCoopStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCoopStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyContracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCoopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinCoopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoJoinCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoopPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoopPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftPlayerCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickPlayerCoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCoopStatusUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCoopStatusUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopBuffState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoopBuffHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearAllUserDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeriodicalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdAttributionRawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdAttributionRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdAttributionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactInventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventorySlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CraftArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetArtifactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCompleteMissionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCraftArtifactPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConsumeArtifactPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSetArtifactPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTransferPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Artifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Simulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Mission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_Misc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_ResearchItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_NewsHeadline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_AchievementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_ActiveBoost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_OwnedBoost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_MissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_Goal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract_GoalSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCoopStatusResponse_ContributionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCoopStatusResponse_CoopGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionInfo_Fuel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse_MissionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse_ArtifactParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsConfigurationResponse_MissionParameters_Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteMissionResponse_SecureArtifactSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB_ActiveArtifactSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB_ActiveArtifactSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ei_ei_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactsDB_CraftableArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ei_ei_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ei_ei_proto_goTypes,
		DependencyIndexes: file_ei_ei_proto_depIdxs,
		EnumInfos:         file_ei_ei_proto_enumTypes,
		MessageInfos:      file_ei_ei_proto_msgTypes,
	}.Build()
	File_ei_ei_proto = out.File
	file_ei_ei_proto_rawDesc = nil
	file_ei_ei_proto_goTypes = nil
	file_ei_ei_proto_depIdxs = nil
}
